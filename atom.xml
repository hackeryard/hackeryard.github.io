<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Spark Era Coming...</title>
  
  <subtitle>分享技术 记录生活</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://hackeryard.github.io/"/>
  <updated>2020-04-26T15:35:48.252Z</updated>
  <id>https://hackeryard.github.io/</id>
  
  <author>
    <name>Runking Hanna</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>最接近的两数之和</title>
    <link href="https://hackeryard.github.io/2020/04/26/two-sum-closest/"/>
    <id>https://hackeryard.github.io/2020/04/26/two-sum-closest/</id>
    <published>2020-04-26T15:15:56.000Z</published>
    <updated>2020-04-26T15:35:48.252Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><hr><p>给定一个包括 n 个整数的数组 nums 和 一个目标值 target。找出 nums 中的两个整数，使得它们的和与 target 最接近。返回这两个数的和。假定每组输入只存在唯一答案。</p><p>例如，给定数组 nums = [-1，2，1，-4], 和 target = 1.</p><p>与 target 最接近的两个数的和为 1. (-1 + 2 = 1).</p><h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><hr><p>暴力破解，需要O(N^2)的时间复杂度，能不能降低？我们知道在乱序情况下，只能做到两个循环去遍历，如果排序，则可能可以利用头尾指针去智能化地遍历（和大于target则右指针左移，小于target则左指针右移），这样只需要O(N)的复杂度，加上排序复杂度O(NlogN)，最后复杂度是O(NlogN)<br>头尾双指针算法的正确性如何证明？我们要找最接近的两数之和，如此移动，如果能证明不会错失最优解即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 返回最接近的两数之和</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">twoSumClosest</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        <span class="keyword">if</span>(n &lt;= <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        sort(nums.begin(), nums.end());</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> min_diff = INT_MAX;</span><br><span class="line">        <span class="keyword">int</span> closest_sum;</span><br><span class="line">        <span class="keyword">while</span>(left &lt; right) &#123;</span><br><span class="line">            <span class="keyword">int</span> sum = nums[left] + nums[right];</span><br><span class="line">            <span class="keyword">int</span> diff = <span class="built_in">abs</span>(sum - target);</span><br><span class="line">            <span class="keyword">if</span>(diff &lt; min_diff) &#123;</span><br><span class="line">                min_diff = diff;</span><br><span class="line">                closest_sum = sum;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 移动指针</span></span><br><span class="line">            <span class="keyword">if</span>(sum &gt; target) &#123;</span><br><span class="line">                --right;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ++left;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="comment">// end while</span></span><br><span class="line">        <span class="keyword">return</span> closest_sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;给定一个包括 n 个整数的数组 nums 和 一个目标值 target。找出 nums 中的两个整数，使得它们的和
      
    
    </summary>
    
    
      <category term="LeetCode" scheme="https://hackeryard.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>最长递增子序列的个数</title>
    <link href="https://hackeryard.github.io/2020/04/26/number-of-lis/"/>
    <id>https://hackeryard.github.io/2020/04/26/number-of-lis/</id>
    <published>2020-04-26T01:56:45.000Z</published>
    <updated>2020-04-26T02:04:06.701Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>给定一个未排序的整数数组，找到最长递增子序列的个数。</p><p>示例 1:</p><p>输入: [1,3,5,4,7]<br>输出: 2<br>解释: 有两个最长递增子序列，分别是 [1, 3, 4, 7] 和[1, 3, 5, 7]。</p><p>来源：<a href="https://leetcode-cn.com/problems/number-of-longest-increasing-subsequence" target="_blank" rel="noopener">LeetCode</a></p><h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><p>计算LIS的个数，LIS的解法在<a href="/2020/04/26/lis">这里</a>。因为最长递推子序列的个数是不同的，分两种情况：1.LIS[i]是最大的LIS，但以i结尾的LIS个数有多个，在遍历的过程中，逐渐把刚好等于最大长度-1的，都加和起来，作为LIS[i]的序列个数；2.不同结尾的LIS可能都是最大值，则需要把这些也加和，作为最终的结果。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findNumberOfLIS</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        <span class="keyword">if</span>(n &lt;= <span class="number">1</span>) <span class="keyword">return</span> n;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dp(n, <span class="number">1</span>);    <span class="comment">// 以j结尾的最大递增子序列的长度</span></span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; count(n, <span class="number">1</span>); <span class="comment">// 以j结尾的最大递增子序列的个数</span></span><br><span class="line">        <span class="keyword">int</span> max_len = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                <span class="comment">// 找到相同最大长度的加和起来</span></span><br><span class="line">                <span class="comment">// 这里如何判断最大长度？有更大的值赋值替换即可</span></span><br><span class="line">                <span class="keyword">if</span>(nums[j] &lt; nums[i]) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(dp[j] &gt;= dp[i]) &#123; <span class="comment">// 赋值更新 长度采用j的长度</span></span><br><span class="line">                        dp[i] = dp[j] + <span class="number">1</span>;</span><br><span class="line">                        count[i] = count[j];</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(dp[j] + <span class="number">1</span> == dp[i]) &#123; <span class="comment">// 当前长度下刚好相等</span></span><br><span class="line">                        count[i] += count[j];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            max_len = max(max_len, dp[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(max_len == dp[i]) &#123;</span><br><span class="line">                cnt += count[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;p&gt;给定一个未排序的整数数组，找到最长递增子序列的个数。&lt;/p&gt;
&lt;p&gt;示例 1:&lt;/p&gt;
&lt;p&gt;输入: [1,3,5,4,7]
      
    
    </summary>
    
    
      <category term="LeetCode" scheme="https://hackeryard.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>最长递增子序列</title>
    <link href="https://hackeryard.github.io/2020/04/26/lis/"/>
    <id>https://hackeryard.github.io/2020/04/26/lis/</id>
    <published>2020-04-26T00:33:10.000Z</published>
    <updated>2020-04-26T01:58:54.096Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个序列X=(X1,X2,…,Xm)，求X的最长递增子序列。（子序列可以是不连续的，比如{5,6,7,1,2,8}的LIS是5,6,7,8）</p><p>说明:<br>可能会有多种最长上升子序列的组合，你只需要输出对应的长度即可。<br>你算法的时间复杂度应该为 O(n2) 。<br>进阶: 你能将算法的时间复杂度降低到 O(nlogn) 吗?</p><p>来源：<a href="https://leetcode-cn.com/problems/longest-increasing-subsequence" target="_blank" rel="noopener">LeetCode</a></p><h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><p>因为是数组，求数组的最优解，问题太大了，我们能不能划分一下，分成多个子问题？这里子问题是需要跟问题对应的，即与递增子序列对应，我们把子问题划分为(X1…Xi)，LIS[i]是以Xi为结尾的最长递增子序列，最优子结构利用了递增的性质，即比较当前结尾元素和所有子问题结尾元素的大小，如果大，则在子问题解的基础上加1。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lengthOfLIS</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dp(n, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> max_len = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[j] &lt; nums[i]) &#123;</span><br><span class="line">                    dp[i] = max(dp[i], dp[j] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            max_len = max(max_len, dp[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max_len;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;给定一个序列X=(X1,X2,…,Xm)，求X的最长递增子序列。（子序列可以是不连续的，比如{5,6,7,1,2,8}的LI
      
    
    </summary>
    
    
      <category term="LeetCode" scheme="https://hackeryard.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>两个链表的第一个公共节点</title>
    <link href="https://hackeryard.github.io/2020/04/26/first-common-node-of-two-linked-list/"/>
    <id>https://hackeryard.github.io/2020/04/26/first-common-node-of-two-linked-list/</id>
    <published>2020-04-25T23:59:09.000Z</published>
    <updated>2020-04-26T00:24:58.404Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>输入两个链表，找出它们的第一个公共节点。</p><p>注意：<br>如果两个链表没有交点，返回null.<br>在返回结果后，两个链表仍须保持原有的结构。<br>可假定整个链表结构中没有循环。<br>程序尽量满足 O(n) 时间复杂度，且仅用 O(1) 内存。<br><img src="/images/getIntersectionNode.png" alt="公共节点"></p><p>来源：<a href="https://leetcode-cn.com/problems/liang-ge-lian-biao-de-di-yi-ge-gong-gong-jie-dian-lcof" target="_blank" rel="noopener">LeetCode</a></p><h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><p>用hashset可以很快解决问题，即先把链表1的所有节点指针放入set，遍历链表2时，如果找到有相等的指针，则说明这就是第一个公共节点，遍历结束还没找找到，说明没有相交节点。但这种方法的空间复杂度是O(n)，如何找到O(1)的方法呢？这里O(1)必然是使用双指针，分别遍历两个链表，但因为两个链表长度的问题，一次遍历肯定不行，第二次遍历如何继续？<br>因为相交必须是严格的数学推导出的，我们把节点a1…a2的长度记为a，把b1…b3的长度记为b，把公共c1…c3的长度记为c，要判断是否相交，则通过a+c+b=b+c+a这个等式判断，即在链表1第一次遍历结束后，马上从链表2的开始位置继续遍历，链表2同理。在遍历的过程中比较指针是否相等。如果两个链表没有相交，第二次遍历时，会同时指向最后的null，返回null即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">getIntersectionNode</span><span class="params">(ListNode *headA, ListNode *headB)</span> </span>&#123;</span><br><span class="line">        ListNode * p1 = headA;</span><br><span class="line">        ListNode * p2 = headB;</span><br><span class="line">        <span class="keyword">while</span>(p1 != p2) &#123;</span><br><span class="line">            p1 = p1 != <span class="literal">NULL</span> ? p1-&gt;next : headB;</span><br><span class="line">            p2 = p2 != <span class="literal">NULL</span> ? p2-&gt;next : headA;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;输入两个链表，找出它们的第一个公共节点。&lt;/p&gt;
&lt;p&gt;注意：&lt;br&gt;如果两个链表没有交点，返回null.&lt;br&gt;在返回结果
      
    
    </summary>
    
    
      <category term="LeetCode" scheme="https://hackeryard.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>最长公共子串（Longest Common Substring）</title>
    <link href="https://hackeryard.github.io/2020/04/25/Longest-Common-Substring/"/>
    <id>https://hackeryard.github.io/2020/04/25/Longest-Common-Substring/</id>
    <published>2020-04-25T12:46:45.000Z</published>
    <updated>2020-04-25T23:25:10.744Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><hr><p>给定两个序列X=(X1,X2,…,Xm)和Y=(Y1,Y2,…,Yn)，求X和Y的最长公共子串。<br>例如：输入两个字符串acbac和acaccbabb，则最大连续子串为cba, 则返回长度3。</p><h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><p>参考之前关于<a href="/2020/04/25/lcs">最长公共子序列LCS</a>的解法，我们发现LCS是一种通用的公共子序列，而子串是一种连续的子序列，所以需要修改递推公式。<strong>此处动态规划表格存放的内容有所不同</strong>，LCS是比较子串，当前问题是为了使用连续子串这一条件，所以考虑设数组dp[i,j]表示以Xi和Yj结尾的最大公共连续子串的长度，如果Xi=Yj，则dp[i,j]=dp[i-1,j-1]+1，只需要再考虑dp[i-1,j-1]这个子问题，如果不相等，则dp[i,j]=0，如果i=0或j=0，说明有一个字符串已经结束了，则dp[i,j]=0。需要注意的是，dp的含义决定了最后的输出结果不是dp[m,n]，而必须在计算dp的过程中寻找最大值。</p><p>递归+memo：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">longestCommonSubstring</span><span class="params">(<span class="built_in">string</span> text1, <span class="built_in">string</span> text2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> size1 = text1.size();</span><br><span class="line">        <span class="keyword">int</span> size2 = text2.size();</span><br><span class="line">        <span class="keyword">int</span> memo[<span class="number">1001</span>][<span class="number">1001</span>];</span><br><span class="line">        <span class="built_in">memset</span>(memo, <span class="number">0</span>, <span class="number">1001</span>*<span class="number">1001</span>*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">        <span class="keyword">int</span> max_len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> end_index;</span><br><span class="line">        lcs(text1, text2, memo, size1<span class="number">-1</span>, size2<span class="number">-1</span>, max_len, end_index);</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;text1.substr(end_index-max_len+<span class="number">1</span>, max_len);</span><br><span class="line">        <span class="keyword">return</span> max_len;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lcs</span><span class="params">(<span class="built_in">string</span> &amp; a, <span class="built_in">string</span> &amp; b, <span class="keyword">int</span> memo[][<span class="number">1001</span>], <span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> &amp; max_len, <span class="keyword">int</span> &amp; end_index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">-1</span> || j == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 有一个字符串已经结束</span></span><br><span class="line">        <span class="keyword">if</span>(memo[i][j] != <span class="number">-1</span>) <span class="keyword">return</span> memo[i][j];</span><br><span class="line">        <span class="keyword">if</span>(a[i] == b[j]) &#123;</span><br><span class="line">            memo[i][j] = lcs(a, b, memo, i<span class="number">-1</span>, j<span class="number">-1</span>, max_len, end_index) + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            memo[i][j] = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// 此处这么做为了使lcs继续推进 不然遇到零就停下来了</span></span><br><span class="line">            lcs(a, b, memo, i, j<span class="number">-1</span>, max_len, end_index);</span><br><span class="line">            lcs(a, b, memo, i<span class="number">-1</span>, j, max_len, end_index);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(memo[i][j] &gt; max_len) &#123;</span><br><span class="line">            max_len = memo[i][j];</span><br><span class="line">            end_index = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> memo[i][j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h2><hr><p>自底向上的解法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">longestCommonSubstring</span><span class="params">(<span class="built_in">string</span> text1, <span class="built_in">string</span> text2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> dp[<span class="number">1001</span>][<span class="number">1001</span>];</span><br><span class="line">        <span class="comment">// memset更高效 memset针对cpu指令集做了优化</span></span><br><span class="line">        <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="number">1001</span>*<span class="number">1001</span>*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">        <span class="keyword">int</span> size1 = text1.size();</span><br><span class="line">        <span class="keyword">int</span> size2 = text2.size();</span><br><span class="line">        <span class="keyword">int</span> max_len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> end_index;</span><br><span class="line">        <span class="comment">// 从1开始 是为了把c[0,j]和c[i,0]留给空字符串用</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= size1; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= size2; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(text1[i<span class="number">-1</span>] == text2[j<span class="number">-1</span>]) &#123;</span><br><span class="line">                    dp[i][j] = dp[i<span class="number">-1</span>][j<span class="number">-1</span>] + <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    dp[i][j] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 保存最大长度</span></span><br><span class="line">                <span class="keyword">if</span>(dp[i][j] &gt; max_len) &#123;</span><br><span class="line">                    max_len = dp[i][j];</span><br><span class="line">                    end_index = i<span class="number">-1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;text1.substr(end_index-max_len+<span class="number">1</span>, max_len);</span><br><span class="line">        <span class="keyword">return</span> max_len;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;给定两个序列X=(X1,X2,…,Xm)和Y=(Y1,Y2,…,Yn)，求X和Y的最长公共子串。&lt;br&gt;例如：输入
      
    
    </summary>
    
    
      <category term="LeetCode" scheme="https://hackeryard.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>翻转二叉树</title>
    <link href="https://hackeryard.github.io/2020/04/25/invert-tree/"/>
    <id>https://hackeryard.github.io/2020/04/25/invert-tree/</id>
    <published>2020-04-25T08:19:57.000Z</published>
    <updated>2020-04-25T14:16:47.256Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>翻转一棵二叉树。</p><p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line"></span><br><span class="line">     4</span><br><span class="line">   /   \</span><br><span class="line">  2     7</span><br><span class="line"> / \   / \</span><br><span class="line">1   3 6   9</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"></span><br><span class="line">     4</span><br><span class="line">   /   \</span><br><span class="line">  7     2</span><br><span class="line"> / \   / \</span><br><span class="line">9   6 3   1</span><br></pre></td></tr></table></figure></p><p>来源：<a href="https://leetcode-cn.com/problems/invert-binary-tree" target="_blank" rel="noopener">LeetCode</a></p><h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><p>从根节点的左右子树开始，互换两个节点的指针，完成根节点的翻转，再递归地翻转左右子树节点的左右节点。递归出口是到达树的底部。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">invertTree</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        TreeNode * temp = root-&gt;left;</span><br><span class="line">        root-&gt;left = root-&gt;right;</span><br><span class="line">        root-&gt;right = temp;</span><br><span class="line">        invertTree(root-&gt;right);</span><br><span class="line">        invertTree(root-&gt;left);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h2><p>二叉树BFS，对遍历到的每一个节点，都对其左右节点进行翻转。<br>注意：此时push到队列的元素都非空，因为只有非空才会有对子节点翻转的必要。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">invertTree</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="built_in">queue</span>&lt;TreeNode*&gt; q;</span><br><span class="line">        q.push(root);</span><br><span class="line">        <span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">            TreeNode * node = q.front();</span><br><span class="line">            q.pop();</span><br><span class="line">            TreeNode * temp = node-&gt;left;</span><br><span class="line">            node-&gt;left = node-&gt;right;</span><br><span class="line">            node-&gt;right = temp;</span><br><span class="line">            <span class="keyword">if</span>(node-&gt;left) q.push(node-&gt;left);</span><br><span class="line">            <span class="keyword">if</span>(node-&gt;right) q.push(node-&gt;right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;翻转一棵二叉树。&lt;/p&gt;
&lt;p&gt;示例：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;
      
    
    </summary>
    
    
      <category term="LeetCode" scheme="https://hackeryard.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>最长公共子序列</title>
    <link href="https://hackeryard.github.io/2020/04/25/lcs/"/>
    <id>https://hackeryard.github.io/2020/04/25/lcs/</id>
    <published>2020-04-25T06:51:49.000Z</published>
    <updated>2020-04-25T23:23:08.420Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><hr><p>给定两个字符串 text1 和 text2，返回这两个字符串的最长公共子序列的长度。</p><p>一个字符串的 子序列 是指这样一个新的字符串：它是由原字符串在不改变字符的相对顺序的情况下删除某些字符（也可以不删除任何字符）后组成的新字符串。</p><p>示例 1:<br>输入：text1 = “abcde”, text2 = “ace”<br>输出：3<br>解释：最长公共子序列是 “ace”，它的长度为 3</p><p>提示:<br>1 &lt;= text1.length &lt;= 1000<br>1 &lt;= text2.length &lt;= 1000<br>输入的字符串只含有小写英文字符。</p><p>来源：<a href="https://leetcode-cn.com/problems/longest-common-subsequence" target="_blank" rel="noopener">LeetCode</a></p><h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><hr><p>动态规划思想的本质是动态表格(dynamic table)，使用动态规划必须满足两个条件：1.重复子问题，2.最优子结构，表格的思想是以空间换时间，把求解的所有子问题的解都保存下来，不用重复计算，最优子结构则保证了，原问题的解由子问题的组合构成，就可以写成递推公式，在较短的时间复杂度内求解。<br>针对LCS问题，把字符串a表示为(X1,X2,…,Xm)，字符串b表示为(Y1,Y2,…,Yn)，我们先看看能不能划分子问题：求a和b的LCS，可以定义为LCS[i,j]，其中i表示从X1到Xi的子串，j表示从Y1到Yj的子串，这里固定了字符串的起始索引1。为什么这么划分子问题？因为如果起始索引和结束索引都动态的话，那就更难解决了，更重要的是，我们求最长公共子序列，起始索引动态是没有意义的，因为起始索引大于1的子问题，其结果总会小于等于索引为1的子问题结果。<br>问题形式化之后，我们发现，如果Xi=Yj，则LCS[i,j]=LCS[i-1,j-1]+1，只需要再考虑LCS[i-1,j-1]这个子问题，如果不相等，则有两个子问题需要解决，LCS[i,j]=max(LCS[i,j-1], LCS[i-1,j])，如果i=0或j=0，说明有一个字符串已经结束了，则LCS[i,j]=0</p><p>解决递推公式问题，有两种方法，一种是自底向上，从求解小问题开始，逐渐求解整个问题，另一种是递归的方式，因为中途有很多重复子问题（如LCS[i-1,j-1]可能是LCS[i,j]的子问题，也可能LCS[i,j-1]的子问题），所以使用memo数组记录下这些子问题的解。</p><p>以下是递归+memo的解法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">longestCommonSubsequence</span><span class="params">(<span class="built_in">string</span> text1, <span class="built_in">string</span> text2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> size1 = text1.size();</span><br><span class="line">        <span class="keyword">int</span> size2 = text2.size();</span><br><span class="line">        <span class="keyword">int</span> memo[<span class="number">1001</span>][<span class="number">1001</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1001</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">1001</span>; j++) &#123;</span><br><span class="line">                memo[i][j] = <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lcs(text1, text2, memo, size1<span class="number">-1</span>, size2<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lcs</span><span class="params">(<span class="built_in">string</span> &amp; a, <span class="built_in">string</span> &amp; b, <span class="keyword">int</span> memo[][<span class="number">1001</span>], <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">-1</span> || j == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 有一个字符串已经结束</span></span><br><span class="line">        <span class="keyword">if</span>(memo[i][j] != <span class="number">-1</span>) <span class="keyword">return</span> memo[i][j];</span><br><span class="line">        <span class="keyword">if</span>(a[i] == b[j]) &#123;</span><br><span class="line">            memo[i][j] = lcs(a, b, memo, i<span class="number">-1</span>, j<span class="number">-1</span>) + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> memo[i][j];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            memo[i][j] = max(lcs(a, b, memo, i<span class="number">-1</span>, j), lcs(a, b, memo, i, j<span class="number">-1</span>));</span><br><span class="line">            <span class="keyword">return</span> memo[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h2><hr><p>自底向上的解法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">longestCommonSubsequence</span><span class="params">(<span class="built_in">string</span> text1, <span class="built_in">string</span> text2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> dp[<span class="number">1001</span>][<span class="number">1001</span>];</span><br><span class="line">        <span class="comment">// 对于dp数组的初始化</span></span><br><span class="line">        <span class="comment">// memset更高效 memset针对cpu指令集做了优化</span></span><br><span class="line">        <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="number">1001</span>*<span class="number">1001</span>*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">        <span class="keyword">int</span> size1 = text1.size();</span><br><span class="line">        <span class="keyword">int</span> size2 = text2.size();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= size1; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= size2; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(text1[i<span class="number">-1</span>] == text2[j<span class="number">-1</span>]) &#123;</span><br><span class="line">                    dp[i][j] = dp[i<span class="number">-1</span>][j<span class="number">-1</span>] + <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    dp[i][j] = max(dp[i][j<span class="number">-1</span>], dp[i<span class="number">-1</span>][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[size1][size2];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;给定两个字符串 text1 和 text2，返回这两个字符串的最长公共子序列的长度。&lt;/p&gt;
&lt;p&gt;一个字符串的 
      
    
    </summary>
    
    
      <category term="LeetCode" scheme="https://hackeryard.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>对称二叉树</title>
    <link href="https://hackeryard.github.io/2020/04/25/symmetric-tree/"/>
    <id>https://hackeryard.github.io/2020/04/25/symmetric-tree/</id>
    <published>2020-04-25T05:38:01.000Z</published>
    <updated>2020-04-25T08:34:44.200Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><hr><p>给定一个二叉树，检查它是否是镜像对称的。</p><p>例如，二叉树 [1,2,2,3,4,4,3] 是对称的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    1</span><br><span class="line">   / \</span><br><span class="line">  2   2</span><br><span class="line"> / \ / \</span><br><span class="line">3  4 4  3</span><br></pre></td></tr></table></figure></p><p>来源：<a href="https://leetcode-cn.com/problems/symmetric-tree" target="_blank" rel="noopener">LeetCode</a></p><h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><hr><p>给定一个根节点，如何判断左右子树对称，设计一个递归函数，传递左右子树的根节点到递归函数，返回值是这两颗子树是否相等。在函数里，每次只比较两个子树的根节点是否相等，剩下的交给函数递归求解。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isSymmetric</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> helper(root-&gt;left, root-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">helper</span><span class="params">(TreeNode * left, TreeNode * right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!left &amp;&amp; !right) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(!left || !right) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(left-&gt;val != right-&gt;val) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> helper(left-&gt;left, right-&gt;right) &amp;&amp; helper(left-&gt;right, right-&gt;left);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h2><hr><p>既然对称的树，每一层都是符合对称的规则，那么能不能按照逐层判断的方式，层次遍历，每一层判断过程中，如果检测到不对称，则立即返回，如果最后遍历完，仍然没有不对称的，则说明树是对称的。<br>注意：此处push到队列的后续节点，可以是null，null是参与比较是否对称的。而一般的二叉树层次遍历只输出非null的节点。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isSymmetric</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="built_in">queue</span>&lt;TreeNode*&gt; q;</span><br><span class="line">        q.push(root-&gt;left);</span><br><span class="line">        q.push(root-&gt;right);</span><br><span class="line">        <span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">            <span class="comment">// 每次取对称位置的两个节点判断</span></span><br><span class="line">            TreeNode *node1 = q.front();</span><br><span class="line">            q.pop();</span><br><span class="line">            TreeNode *node2 = q.front();</span><br><span class="line">            q.pop();</span><br><span class="line">            <span class="comment">// 继续判断别的对称位置的节点</span></span><br><span class="line">            <span class="keyword">if</span>(!node1 &amp;&amp; !node2) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(!node1 || !node2) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span>(node1-&gt;val != node2-&gt;val) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            q.push(node1-&gt;left);</span><br><span class="line">            q.push(node2-&gt;right);</span><br><span class="line">            q.push(node1-&gt;right);</span><br><span class="line">            q.push(node2-&gt;left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;给定一个二叉树，检查它是否是镜像对称的。&lt;/p&gt;
&lt;p&gt;例如，二叉树 [1,2,2,3,4,4,3] 是对称的。&lt;
      
    
    </summary>
    
    
      <category term="LeetCode" scheme="https://hackeryard.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>反转链表</title>
    <link href="https://hackeryard.github.io/2020/04/20/reverse-list/"/>
    <id>https://hackeryard.github.io/2020/04/20/reverse-list/</id>
    <published>2020-04-20T07:25:48.000Z</published>
    <updated>2020-04-25T05:41:24.099Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><hr><p>反转一个单链表。</p><p>示例:<br>输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL<br>输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL<br>进阶:<br>你可以迭代或递归地反转链表。你能否用两种方法解决这道题？</p><p>来源：<a href="https://leetcode-cn.com/problems/reverse-linked-list" target="_blank" rel="noopener">LeetCode</a></p><h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><hr><p>从前往后，每次反转后一个节点，维持两个指针prev和last，分别指向第一个和第二个节点，依次后移，直到链表结束同时因为last反转后，下一个节点的连接丢失，所以必须维持一个临时指针，保存last的下一个节点。结束时，置head节点为NULL。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">nullptr</span> || head-&gt;next == <span class="literal">nullptr</span>) <span class="keyword">return</span> head;</span><br><span class="line">        ListNode * prev = head;</span><br><span class="line">        ListNode * last = head-&gt;next;</span><br><span class="line">        <span class="keyword">while</span>(last) &#123;</span><br><span class="line">            ListNode * temp = last-&gt;next;</span><br><span class="line">            last-&gt;next = prev;</span><br><span class="line">            prev = last;</span><br><span class="line">            last = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        head-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h2><hr><p>反转链表有点像栈，最简单的思路是节点指针存放在栈中，出栈时依次指向下一个在栈顶中的元素。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">nullptr</span>) <span class="keyword">return</span> head;</span><br><span class="line">        <span class="built_in">stack</span>&lt;ListNode*&gt; s;</span><br><span class="line">        <span class="keyword">while</span>(head) &#123;</span><br><span class="line">            s.push(head);</span><br><span class="line">            head = head-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode * cur; <span class="comment">// 工作指针</span></span><br><span class="line">        ListNode * newhead = s.top(); <span class="comment">// 最开始的位置</span></span><br><span class="line">        <span class="keyword">while</span>(!s.empty()) &#123;</span><br><span class="line">            cur = s.top();</span><br><span class="line">            s.pop();</span><br><span class="line">            cur-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">            <span class="keyword">if</span>(!s.empty()) &#123;</span><br><span class="line">                cur-&gt;next = s.top();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newhead;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="解法三"><a href="#解法三" class="headerlink" title="解法三"></a>解法三</h2><hr><p>与栈的解法类似，可以用递归的方式模拟栈。递归首先要找出能递归的子问题，子问题的结构在递归时需要保持一致，每次递归都完成一点工作，最后递归过程结束时，就得到了问题的解。<br>反转链表中，首先依次递归到底部，找到结尾节点作为返回值，之后因为从倒数第二个节点开始，用p-&gt;next-&gt;next=p的方式完成后一个节点到当前节点的反转，递归结束退回到head。注意每次递归下一个节点返回，都把它的next置位nullptr，这是为了最后不用单独置head-&gt;next=nullptr，保持递归的结构。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">nullptr</span> || head-&gt;next == <span class="literal">nullptr</span>) <span class="keyword">return</span> head;</span><br><span class="line">        ListNode * newhead = reverseList(head-&gt;next);</span><br><span class="line">        head-&gt;next-&gt;next = head;</span><br><span class="line">        head-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">return</span> newhead;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;反转一个单链表。&lt;/p&gt;
&lt;p&gt;示例:&lt;br&gt;输入: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5-&amp;gt;
      
    
    </summary>
    
    
      <category term="LeetCode" scheme="https://hackeryard.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>常用工具集</title>
    <link href="https://hackeryard.github.io/2018/03/21/tool-set/"/>
    <id>https://hackeryard.github.io/2018/03/21/tool-set/</id>
    <published>2018-03-21T13:31:30.000Z</published>
    <updated>2018-03-23T03:51:26.707Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vim快捷键："><a href="#Vim快捷键：" class="headerlink" title="Vim快捷键："></a>Vim快捷键：</h2><ul><li>跳到第一行  :1 或 gg</li><li>跳到最后一行  :$ 或 Shift+g</li><li>复制  yy</li><li>删除  dd </li><li>撤销  U </li><li>粘贴  P </li></ul><h2 id="加载Python自带Web-Server："><a href="#加载Python自带Web-Server：" class="headerlink" title="加载Python自带Web Server："></a>加载Python自带Web Server：</h2><ul><li>python -m SimpleHTTPServer 80</li><li>python3 -m http.server 80</li></ul><h2 id="Webstorm快捷键"><a href="#Webstorm快捷键" class="headerlink" title="Webstorm快捷键"></a>Webstorm快捷键</h2><ul><li>Ctrl + Alt + L 格式化代码</li><li>双击shift 全局查找</li><li>快速代码补全 emmet </li><li>快速生成框架 !html</li></ul><h2 id="Onenote使用笔记"><a href="#Onenote使用笔记" class="headerlink" title="Onenote使用笔记"></a>Onenote使用笔记</h2><ul><li>截图：Win+shift+S</li></ul><h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><ul><li>重新加载配置：nginx -s reload</li><li>快速关闭：nginx -s stop</li><li>安全关闭：nginx -s quit</li></ul><h2 id="FFmpeg"><a href="#FFmpeg" class="headerlink" title="FFmpeg"></a>FFmpeg</h2><h2 id="celery-4-in-Windows"><a href="#celery-4-in-Windows" class="headerlink" title="celery 4 in Windows"></a>celery 4 in Windows</h2><ul><li>不支持pool：celery -A your_app_name worker –pool=solo -l info</li></ul><h2 id="lsof：list-open-files"><a href="#lsof：list-open-files" class="headerlink" title="lsof：list open files"></a>lsof：list open files</h2><p>查看进程打开的文件列表</p><ul><li>lsof -c -p pid</li><li>lsof -c program</li></ul><h2 id="获取当前缓存（加载）的动态链接库："><a href="#获取当前缓存（加载）的动态链接库：" class="headerlink" title="获取当前缓存（加载）的动态链接库："></a>获取当前缓存（加载）的动态链接库：</h2><ul><li>ldconfig -p | grep libssh</li></ul><h2 id="查看可执行文件所依赖的库："><a href="#查看可执行文件所依赖的库：" class="headerlink" title="查看可执行文件所依赖的库："></a>查看可执行文件所依赖的库：</h2><ul><li>ldd 绝对路径</li><li>（程序的某个section中会记录动态链接的信息）</li></ul><h2 id="aliases"><a href="#aliases" class="headerlink" title="aliases"></a>aliases</h2><ul><li>alias de=’ps -ef |grep’</li><li>alias c=’clear’</li><li>alias ncat=’netstat -nlp |grep’</li><li>alias listp=’pkg-config –list-all |grep’</li><li>alias versionp=’pkg-config –modversion’</li><li>alias finf=’find / -name’</li><li>alias s=’apt-cache search’</li></ul><h2 id="高亮日志分析工具（log-navigator）："><a href="#高亮日志分析工具（log-navigator）：" class="headerlink" title="高亮日志分析工具（log navigator）："></a>高亮日志分析工具（log navigator）：</h2><ul><li>apt-get install lnav</li></ul><h2 id="ovs"><a href="#ovs" class="headerlink" title="ovs"></a>ovs</h2><ul><li><p>运维：</p><ul><li>运维脚本位置<ul><li>/usr/share/openvswitch/scripts</li><li>/usr/local/share/openvswitch/scripts</li></ul></li><li>启动：ovs-ctl start</li><li>重启：ovs-ctl restart</li><li>状态：ovs-ctl status</li></ul></li><li><p>查看日志：</p><ul><li>ovsdb-tool show-log</li></ul></li><li><p>查看ovsdb里面的数据表：</p><ul><li>ovsdb-client list-tables</li></ul></li><li><p>查看ovsdb中的相关字段定义</p><ul><li>ovsdb-client list-columns Interface | grep ofport</li></ul></li><li><p>查看ovsdb中的相关数据：</p><ul><li>ovs-vsctl  – –columns=external_ids,name,ofport,ofport_request  list Interface</li></ul></li><li><p>alias:</p><ul><li>alias ovss=’ovs-vsctl show’</li><li>alias apps=’ovs-appctl fdb/show’</li><li>alias ofs=’ovs-ofctl show ofc-bridge’</li></ul></li></ul><h2 id="编译相关"><a href="#编译相关" class="headerlink" title="编译相关"></a>编译相关</h2><ul><li><p>cmake：</p><ul><li>一个跨平台编译工具 用于生成适配平台的Makefile</li><li>mkdir build</li><li>cd build</li><li>cmake ..</li><li>make &amp;&amp; make install</li><li>重新cmake之前需要删除CMakeCache.txt</li></ul></li><li><p>pkg-config:</p><ul><li>编译库的时候 使用这个工具管理其依赖</li><li>即记录头文件和库文件的存放位置 用于编译和链接</li><li>pkg-config –list-all | grep libnetconf</li><li>pkg-config  –modversion libnetconf</li></ul></li></ul><h2 id="IPv6-DNS"><a href="#IPv6-DNS" class="headerlink" title="IPv6 DNS:"></a>IPv6 DNS:</h2><ul><li>国内公共DNS（延迟2ms）：<ul><li>240c::6666</li><li>240c::6644</li></ul></li><li>he.net(US延迟156ms）：<ul><li>2001:470:20::2</li><li>2001:470:0:9d::2</li></ul></li><li>Google（延迟156ms）：<ul><li>2001:4860:4860::8888</li><li>2001:4860:4860::8844</li></ul></li></ul><h2 id="屏蔽广告："><a href="#屏蔽广告：" class="headerlink" title="屏蔽广告："></a>屏蔽广告：</h2><ul><li>hosts方式：<ul><li>0.0.0.0 xian.qq.com</li><li>0.0.0.0 q.i.gdt.qq.com</li><li>0.0.0.0 v.gdt.qq.com</li><li>0.0.0.0 c.gdt.qq.com</li><li>…</li></ul></li><li>插件方式：<ul><li>adblock</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Vim快捷键：&quot;&gt;&lt;a href=&quot;#Vim快捷键：&quot; class=&quot;headerlink&quot; title=&quot;Vim快捷键：&quot;&gt;&lt;/a&gt;Vim快捷键：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;跳到第一行  :1 或 gg&lt;/li&gt;
&lt;li&gt;跳到最后一行  :$ 或 Shift+g
      
    
    </summary>
    
      <category term="工具" scheme="https://hackeryard.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具 备忘" scheme="https://hackeryard.github.io/tags/%E5%B7%A5%E5%85%B7-%E5%A4%87%E5%BF%98/"/>
    
  </entry>
  
  <entry>
    <title>hexo博客之旅 [3]: 添加gitment评论和链接分享功能</title>
    <link href="https://hackeryard.github.io/2018/02/03/the-journal-of-hexo-blog-3/"/>
    <id>https://hackeryard.github.io/2018/02/03/the-journal-of-hexo-blog-3/</id>
    <published>2018-02-03T05:42:44.000Z</published>
    <updated>2020-04-25T01:16:30.227Z</updated>
    
    <content type="html"><![CDATA[<p>一个博客如果没有评论和分享功能，势必是单点的，你只是单向的发布信息，读者无法评论和快速分享，这对博主和读者都是巨大的损失。</p><h2 id="添加评论系统"><a href="#添加评论系统" class="headerlink" title="添加评论系统"></a>添加评论系统</h2><p><a href="https://github.com/imsun/gitment/" target="_blank" rel="noopener">gitment</a>是一个基于github issue给博客添加评论的系统，原理大概是通过博客作者在某个repo创建带有某个label的issue，来为某篇博客对应评论，由于github的在线编辑器支持markdown预览，还是很优雅的，而且这样做也不用为hexo这样的静态博客添加动态代码来存取评论。</p><p>一篇博客对应一个issue，只有博主经过授权后，才可以初始化issue，这样后续的读者就可以用自己的github账号登录博主的gitment应用，来向这篇博客添加评论，里面的对文章的点赞和对其他用户的点赞，其实跟issue主页的点击操作一样，都是通过api操作的。</p><p>这么说来，gitment只是一个基于issue的评论前台，用于存取issue里面的评论数据。</p><p>部署的时候，我参考了<a href="https://blog.fundebug.com/2017/06/16/how-to-use-gitment/" target="_blank" rel="noopener">这篇文章</a>，并且遇到了一个问题，登录自家博客之后，文章底部出现了gitment的框架，由于没有初始化issue，点击初始化按钮后，提示<a href="https://github.com/imsun/gitment/issues/114" target="_blank" rel="noopener">Validation Failed</a>，</p><p>一番搜索后，发现是github issue中的label长度有限制，不能超过50字节。</p><p><img src="/images/label-limit.png" alt="label长度 &lt;= 50字节"></p><p>查看js代码后，发现id是<em>window.location.href</em>，这样长度会经常超出。由于我之前文章的url都是英文的，所以使用url中的英文标题作为id，后续需要整理一番英文title，以正常初始化issue:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mod_id = <span class="built_in">window</span>.location.href.split(<span class="string">"/"</span>);</span><br><span class="line">mod_id = mod_id[mod_id.length - <span class="number">2</span>];</span><br><span class="line"><span class="built_in">Object</span>.assign(<span class="keyword">this</span>, &#123;</span><br><span class="line">  id: mod_id,</span><br><span class="line">  title: <span class="built_in">window</span>.document.title,</span><br><span class="line">  link: <span class="built_in">window</span>.location.href</span><br></pre></td></tr></table></figure><p>gitment评论系统很优雅，虽然有时候github的国内访问速度超慢，但github的数据很稳定，不会像多说一样为数据丢失担忧。</p><p>在使用过程中，发现gitment对于新文章的初始化需要博主自己点击，这对像我这样从其他博客迁移过来的用户而言，重复几十次的点击就不是那么有意思了。</p><p>为此，我写了一个自动化脚本，工作流程如下：</p><ol><li>由于新开的chrome不包含github已登录session和cookie，所以需要模拟登录github账号</li><li>获取站点sitemap.xml，如(<a href="https://hackeryard.github.io/sitemap.xml)，解析成文章的url">https://hackeryard.github.io/sitemap.xml)，解析成文章的url</a></li><li>依次模拟打开上述url，初次打开需要login，之后的文章则不再需要</li><li>对每篇文章模拟点击init button，如果点击出错，表示已被初始化；如果成功，表示正在初始化，sleep 5s后打开下一个url</li></ol><p>脚本在<a href="https://github.com/hackeryard/hexo-plugins/blob/master/init-gitment.py" target="_blank" rel="noopener">这里</a>，欢迎使用！</p><h2 id="替换分享链接到国内社交站点"><a href="#替换分享链接到国内社交站点" class="headerlink" title="替换分享链接到国内社交站点"></a>替换分享链接到国内社交站点</h2><p>话说hexo是一个台湾开发者写的，文章的默认分享都是分享到国外的社交平台，如Twitter/Facebook/G+等，能上这些网站的用户固然是少数，所以把分享功能本地化是很有必要的。</p><p>首先,我参考了<a href="https://blanboom.org/2015/hack-hexo-theme-landscape/" target="_blank" rel="noopener">这篇文章</a>，由于我是用的hexo，其landscape主题里面的fonts是4.0.3版本的fontawesome，导致qq和腾讯微博的图标无法显示，按照文中的方法折腾了最新版的5.0.6版本，找到webfont子目录，替换了hexo中的fonts下的文件，发现这次原有图标失效，新添加了四个分享按钮却是正常的，我以为是缓存的问题，又去看了Edge浏览器，还有手机Brave/Chrome浏览器，仍然不行，正打算撤回老版本的时候，发现fontawesome的4和5版本差别很大(的确，想想python2/3，主版本间的差别可能很大)，这可能就是不兼容的原因。</p><p>没在fontawesome官网上找到老版本的存档，搜了半天，找到一个<a href="http://fontawesome.dashgame.com/" target="_blank" rel="noopener">4.7版本的站点</a>，下载后解压，然后更新版本号即可。</p><h2 id="其他参考"><a href="#其他参考" class="headerlink" title="其他参考"></a>其他参考</h2><p><a href="http://www.codertian.com/2016/03/14/change-landscape-theme-by-yourself/" target="_blank" rel="noopener">【实用技能】教你定制Hexo的landscape打造自己的主题</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一个博客如果没有评论和分享功能，势必是单点的，你只是单向的发布信息，读者无法评论和快速分享，这对博主和读者都是巨大的损失。&lt;/p&gt;
&lt;h2 id=&quot;添加评论系统&quot;&gt;&lt;a href=&quot;#添加评论系统&quot; class=&quot;headerlink&quot; title=&quot;添加评论系统&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="博客" scheme="https://hackeryard.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="hexo" scheme="https://hackeryard.github.io/tags/hexo/"/>
    
      <category term="blog" scheme="https://hackeryard.github.io/tags/blog/"/>
    
      <category term="gitment" scheme="https://hackeryard.github.io/tags/gitment/"/>
    
      <category term="github" scheme="https://hackeryard.github.io/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>hexo博客之旅 [2]: 利用webhooks自动部署hexo博客</title>
    <link href="https://hackeryard.github.io/2018/01/29/the-journal-of-hexo-blog-2/"/>
    <id>https://hackeryard.github.io/2018/01/29/the-journal-of-hexo-blog-2/</id>
    <published>2018-01-29T05:42:44.000Z</published>
    <updated>2020-04-20T04:02:16.614Z</updated>
    
    <content type="html"><![CDATA[<p>以前觉得hook是个深奥的技术，的确，到现在我还没写过一个hook，网上有很多文章讲hook都是用的win32 API，不知何时我竟然看不下去这种代码了，不知是喜是忧。</p><p>从<a href="https://developer.github.com/webhooks/" target="_blank" rel="noopener">Github给出的解释</a>搬运一段如下：</p><blockquote><p>Webhooks allow you to build or set up GitHub Apps which subscribe to certain events on GitHub.com. When one of those events is triggered, we’ll send a HTTP POST payload to the webhook’s configured URL. Webhooks can be used to update an external issue tracker, trigger CI builds, update a backup mirror, or even deploy to your production server. You’re only limited by your imagination.</p></blockquote><p>webhooks就是这样一种机制，当你的repo有某个特定的事件发生时，比如push/PR/issue/fork等，github在后台会向你填写的URL发送一个POST请求，里面包含了很多信息，比如issue会有sender和相应的repo，还有issue的地址等。</p><p>另外这段话里面也说明了<em>update a backup mirror</em>这个用法，vps上面的镜像博客给百度索引，github.io给谷歌索引。</p><p>根据webhooks的用法，我们在github pages的repo里面订阅对push事件的钩子，vps后台开启一个简单的web server监听此请求，然后使用git pull更新github pages里面的静态博客文件到本地。</p><p><img src="/images/webhooks.png" alt="设置Webhooks"></p><p>之前参考的一篇博客已经记不起来了，只记得是用node写的，我用python重写了一下，见<a href="https://github.com/hackeryard/hexo-plugins/blob/master/webhook.py" target="_blank" rel="noopener">github</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;以前觉得hook是个深奥的技术，的确，到现在我还没写过一个hook，网上有很多文章讲hook都是用的win32 API，不知何时我竟然看不下去这种代码了，不知是喜是忧。&lt;/p&gt;
&lt;p&gt;从&lt;a href=&quot;https://developer.github.com/webhoo
      
    
    </summary>
    
      <category term="博客" scheme="https://hackeryard.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="hexo" scheme="https://hackeryard.github.io/tags/hexo/"/>
    
      <category term="blog" scheme="https://hackeryard.github.io/tags/blog/"/>
    
      <category term="webhooks" scheme="https://hackeryard.github.io/tags/webhooks/"/>
    
      <category term="部署" scheme="https://hackeryard.github.io/tags/%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>hexo博客之旅 [1]: 初探hexo</title>
    <link href="https://hackeryard.github.io/2018/01/29/the-journal-of-hexo-blog-1/"/>
    <id>https://hackeryard.github.io/2018/01/29/the-journal-of-hexo-blog-1/</id>
    <published>2018-01-29T04:42:44.000Z</published>
    <updated>2020-04-20T06:36:17.838Z</updated>
    
    <content type="html"><![CDATA[<p>经历过WordPress，也尝试过github pages，因为WordPress的数据库由于机器内存吃紧，经常掉线，另一个原因是有人ddos，恶意攻击我的站点，导致我设置了一个定时任务，每一个小时重启数据库，基本可用。</p><p>github pages可以用来存放静态博客，以前用过来存放俱乐部站点或个人主页，但没充分利用来写博客。</p><p>借用官网的解释，Hexo 是一个快速、简洁且高效的博客框架，目前我们看到的很多IT博客都是用的hexo + next主题，认同度是比较高的。<br>初识Hexo，可以从<a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">官方文档</a>开始了解。</p><p>最初是在vps上搭建，但是平时习惯用vscode编辑器，所以就在本地搭建一个博客，然后push到github pages，其实这样一个静态博客就可以访问了，但由于github.io禁止百度爬虫爬取，所以对于百度的SEO影响很大，也就是你的博客在百度里面几乎找不到。一个解决方法是用vps镜像一份博客内容，然后手动添加到百度的收录里去，详见<a href="/2018/01/29/the-journal-of-hexo-blog-2">hexo博客之旅 [2]: 利用webhooks自动部署hexo博客</a>。</p><p>安装好nodejs、git for windows、和hexo之后，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog</span><br><span class="line"><span class="built_in">cd</span> blog</span><br></pre></td></tr></table></figure></p><p>生成如下目录：</p><ul><li>source(博客的源文件，用于生成最终的public目录下的各个文件)<ul><li>_draft(保存的草稿)</li><li>_post(你将要写的一篇篇的以md结尾的博客)</li></ul></li><li>themes<ul><li>landscape(默认的主题)</li></ul></li><li>_config.yml(全局的配置文件)</li><li>package.json(保存项目的依赖关系)</li></ul><p>之后，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br><span class="line">或者简写： hexo g</span><br></pre></td></tr></table></figure><p>生成public目录，这个目录就是我们最终要放到github pages上的，接着我们测试一下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br><span class="line">或者简写： hexo s</span><br></pre></td></tr></table></figure></p><p>然后打开 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 见第一面吧！</p><p>如果想更换端口，使用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server -p [port]</span><br></pre></td></tr></table></figure></p><p>到这里本地部署已经完成了，接下来就是部署到github：<br>新建一个repo为[your_github_name].github.io, 然后在repo的settings里面设置开启github pages：</p><p><img src="/images/pages.png" alt="开启github pages"></p><p>接下来设置通过ssh来免密连接github，用于后期git操作不用重复输入密码，而且理论上更安全，这里推荐<a href="http://blog.zfan.me/2015/09/01/%E7%94%A8SSH-key%E5%85%8D%E5%8E%BBgithub%E6%8F%90%E4%BA%A4%E6%97%B6%E8%BE%93%E5%85%A5%E5%AF%86%E7%A0%81/" target="_blank" rel="noopener">一篇文章</a></p><p>按照上面的操作，部署到github，并通过[your_github_name].github.io访问。<br>如果有出错，建议安装<a href="https://hexo.io/zh-cn/docs/deployment.html#Git" target="_blank" rel="noopener">git的插件</a></p><p>另外，你可能需要补一下markdown的语法，这里推荐一篇<a href="https://hyxxsfwy.github.io/2016/01/15/Hexo-Markdown-%E7%AE%80%E6%98%8E%E8%AF%AD%E6%B3%95%E6%89%8B%E5%86%8C/" target="_blank" rel="noopener">Hexo-Markdown-简明语法手册</a></p><p>当你慢慢的，写的博客越来越多时，你可能还需要一个README，让别人在访问的repo的时候，就可以对你的博客有一个清晰地了解，我起初在网上没找到代码，就可以写了个<a href="https://github.com/hackeryard/hexo-plugins" target="_blank" rel="noopener">generate_readme</a>，可以复用</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;经历过WordPress，也尝试过github pages，因为WordPress的数据库由于机器内存吃紧，经常掉线，另一个原因是有人ddos，恶意攻击我的站点，导致我设置了一个定时任务，每一个小时重启数据库，基本可用。&lt;/p&gt;
&lt;p&gt;github pages可以用来存放静
      
    
    </summary>
    
      <category term="博客" scheme="https://hackeryard.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="hexo" scheme="https://hackeryard.github.io/tags/hexo/"/>
    
      <category term="blog" scheme="https://hackeryard.github.io/tags/blog/"/>
    
      <category term="js" scheme="https://hackeryard.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>Vincent之死</title>
    <link href="https://hackeryard.github.io/2018/01/19/the-death-of-Vincent/"/>
    <id>https://hackeryard.github.io/2018/01/19/the-death-of-Vincent/</id>
    <published>2018-01-18T23:35:44.000Z</published>
    <updated>2018-01-19T06:25:02.441Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>下文所述仅依靠电影《Loving Vincent》中的故事对Vincent之死作一个推断，在这部电影之前，我并没有看过有关梵高更多的记载。</p></blockquote><p>这是一部来自100多个艺术家的协作而完成的对梵高的致敬之作，Loving Vincent只是Vincent在给弟弟Theo写的信的末尾用语，类似于Yours Sincerely，以此作为题目，说明Vincent对弟弟Theo深深的爱，Vincent几乎每天都要给弟弟写信，诉说自己的近况和对弟弟的思念，还有心底的愧疚。</p><p>那么Vincent是怎么死的？</p><p>如果Vincent是自杀，为什么不跟Mazery医生说的那样，饮弹或者对准太阳穴、心脏这样的致命部位来一枪，而选择了在胃部开了一枪，然后一路忍受痛苦回到卧室，之后还有漫长的等待？</p><p>如果是他杀，想想也只有可能是富家公子Rene，但他也不会无端想要杀死Vincent，他们之间并不存在致命的冲突。</p><p>我一开始也没想到，我觉得Mazery医生说的很有道理，但是我也没考证过那时候的枪到底能不能在距离身体几十公分的位置发射，然后不打穿身体的。现在我觉得这个是没问题的，医生形容得过于夸张了，他怀疑是别人暗杀才可以达到那样的效果。</p><p>回看第二遍的时候，处处隐藏着Vincent执意要自杀的种种看似合理的理由，他给弟弟写信说自己度日如年，他来到弟弟的住所，然后更加知晓了弟弟的状况，他的好朋友玛格丽特被Gachet医生限制住，不跟Vincent来往，他被医生还刺激了一下（医生说他说了作为一个医生所不该说的话）… 这些仿佛都在诉说一个伟大画家的即将凋零，但这里面还有冲突：</p><ul><li>医生把女儿限制住，不是要给Vincent不被打扰的作画环境吗，为什么又跟Vincent吵了一架，而且可以推测，他不该说的话好像就是Vincent应该找个其他的谋生手段，不让自己的作画产生的经济负担压垮弟弟的家庭？</li><li>医生是军医，可以帮Vincent取出子弹，但是他见死不救</li><li>在电影中，枪击现场竟然没有出现，麦田里应该有那把手枪，还有他的画架</li></ul><p>第一条，医生很照顾Vincent，但是他终归不是他的衣食父母，所以他让女儿不跟Vincent接触，理由却是不背打扰伟大画家的锅，其实他有所打算，所以他还是劝Vincent，我猜测大概就是别去作这些没人买的画了，为弟弟减负，但是他不听，反而起火了，甚至刻薄到说出医生是个伪艺术家这样的话，对于一个对艺术心存敬畏和追求的人而言，这是致命的打击。</p><p>第二条，医生本来希望他想想自己接下来的生活，他的目的是让他好好活下去，但是看到负弹的Vincent，他明白他活不久了，他对死的决心由来已久，所以什么也没有做。</p><p>第三条，枪击现场没有出现，警察也只是翻找Vincent卧室的东西，那里肯定没有证据，所以最重要的现场竟然不存在，这决定了无法进一步推测Vincent具体的死法。</p><p>最大的疑点是，Vincent为什么要忍受长久的痛苦，回到卧室等死？<br>我以为，他是有话给Gachet医生说，还有他的弟弟Theo。</p><p>医生看到这个样子的Vincent，一定以为是自己说了不该说的话，也就是上次争吵的事，而引发这次事件的，Vincent回来而不是立即自杀，是要医生明白，“我觉得这对大家都好”，这件事跟他无关。</p><p>Vincent最后也希望Theo到场，希望最后的时光能够有弟弟陪在身旁，这中间自有手足之情，还有Vincent对Theo的愧疚与解脱后的宽慰。</p><p>电影提到，他的出生很大程度决定了他性格的养成，从他的父母那里看出他注定是一个孤独的孩子，而孤独的孩子总是很敏感。</p><p>与弟弟相依为命，靠着作画展现自己的才华，却得不到艺术届的认同，估计放在中国古代，就会多一个怀才不遇的诗人，但是Vincent，我觉得他是彻底绝望的，他深爱的弟弟被自己慢慢拖垮，他的艺术也没得到人们的认同，他陷入了彻底的恐惧，并且在梦里，那激情的，梦幻的星空总是向他投来橄榄枝，他想要逃避，但同时他又说自己走在通往星空的路上。</p><p>对于我以为的艺术家而言，自杀才是主动的靠近那梦里星空所描绘的世界，而他完成了这个目的。</p><p>这是一个悲剧。</p><p>令我不解的是，医生和画铺子老板等人在Vincent生前都可以看出他的才华，为什么就不买一些他的画作？（电影最后说他生前只卖出一幅）</p><p>没有人知道全部真理，尽管电影中的Ravoux家族和Gachet家族的人，以及Mazery医生，仿佛都对Vincent的死抱有坚定不移的态度。</p><p>最后，我想起了宫泽贤治，还有海子的死。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;下文所述仅依靠电影《Loving Vincent》中的故事对Vincent之死作一个推断，在这部电影之前，我并没有看过有关梵高更多的记载。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这是一部来自100多个艺术家的协作而完成的对梵高的致敬之作，Lov
      
    
    </summary>
    
      <category term="随想集" scheme="https://hackeryard.github.io/categories/%E9%9A%8F%E6%83%B3%E9%9B%86/"/>
    
    
      <category term="电影" scheme="https://hackeryard.github.io/tags/%E7%94%B5%E5%BD%B1/"/>
    
      <category term="Vincent" scheme="https://hackeryard.github.io/tags/Vincent/"/>
    
      <category term="梵高" scheme="https://hackeryard.github.io/tags/%E6%A2%B5%E9%AB%98/"/>
    
  </entry>
  
  <entry>
    <title>如何发送空UDP报文</title>
    <link href="https://hackeryard.github.io/2017/07/03/how-to-send-a-null-udp-packet/"/>
    <id>https://hackeryard.github.io/2017/07/03/how-to-send-a-null-udp-packet/</id>
    <published>2017-07-03T09:58:16.000Z</published>
    <updated>2020-04-20T04:00:38.637Z</updated>
    
    <content type="html"><![CDATA[<p><em>我们知道UDP是无连接的，接收和发送一个报文是独立的，而TCP则实现了一整套的诸如流量控制和拥塞控制机制，保证连接的可靠性。</em></p><hr><p>在本文中，你将了解在Socket API中如何发送一个空的UDP报文，并且通过tcpdump抓取后用wireshark查看报文内容。</p><p>本文缘起对recvfrom的返回值的困惑，因为在TCP中，用recv或者read函数，我们可以通过其返回值是否为0，来判断对端的连接状态，是则表示对端关闭写通道，更可能的情况是close掉了连接。<br>但是在UDP中很少见到recvfrom的返回值是0，在man手册中，只说了TCP的recv保留0以指示对端关闭的情况，这个TCP包是空的，因为只需要TCP头部的FIN信息。</p><p>所以，动手看看吧！<br>recvfrom返回0表示有数据包达到，但是数据部分为空，在wireshark中看到，UDP的长度字段为8，正好是UDP的头部长度，数据部分的确为空。</p><p>下图是通过sendto函数广播的空UDP报文：<br><img src="/images/udp0.png" alt="udp空数据" title="udp空数据"></p><p>发送使用sendto，只是设置发送的长度为0，发现返回值为0；同样，接收使用recvfrom，接收广播的消息，发现当空数据包达到时，返回值为0。如下：</p><p><code>sendto(sockfd, buffer, 0, 0, (struct sockaddr *)&amp;amp;brctaddr, addrsize);recvfrom(sockfd, buffer, 0, 0, NULL, NULL);</code></p><p>另外在广播过程中，使用<code>tcpdump udp port 5001 -w test.pcap</code>监听5001端口的流量，并保存在test.pcap中供wireshark查看。</p><p>实验结束。</p><hr><p>TODO： socket API对应的内核相关操作（select和非阻塞IO等）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;em&gt;我们知道UDP是无连接的，接收和发送一个报文是独立的，而TCP则实现了一整套的诸如流量控制和拥塞控制机制，保证连接的可靠性。&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;在本文中，你将了解在Socket API中如何发送一个空的UDP报文，并且通过tcpdump抓取后用wir
      
    
    </summary>
    
      <category term="网络分析" scheme="https://hackeryard.github.io/categories/%E7%BD%91%E7%BB%9C%E5%88%86%E6%9E%90/"/>
    
    
  </entry>
  
  <entry>
    <title>node实践 0x00</title>
    <link href="https://hackeryard.github.io/2017/05/16/node-000/"/>
    <id>https://hackeryard.github.io/2017/05/16/node-000/</id>
    <published>2017-05-16T11:04:04.000Z</published>
    <updated>2018-01-19T01:31:21.196Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>接触node这十多天来，想想因为网站比赛的缘故，开始较为系统的学前后端，从阮一峰老师的博客得知他也在使用node开发，所以更加正好试试node进行开发。</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>node又称nodejs，它提供了有别于浏览器的js执行环境，通过添加硬盘和网络io库的方式让js支持后端运行，而不必束缚在浏览器里处理UI。<br>另外Google v8引擎给了node强劲的性能，在《深入浅出Node.js》中，作者给出很多例子，比如计算同样位数的斐波那契数列，node的性能超过java，也曾有公司把网站用node重写，相比ruby，服务器削减了十倍，从中可见一斑。<br>node的一大特色就是异步io，我们知道，在网络服务中，服务进程大多是io密集型的，如果使用阻塞io库，进程将经常等待io完成，明白点说，在操作系统中，当一个进程被阻塞时，调度器会在就绪队列中选一个占用cpu进行执行，io一般又相当费时，当对于cpu这个计算资源而言，此进程就浪费掉了一部分时间片，从而影响性能，在需要尽量实时的服务上尤为明显。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;接触node这十多天来，想想因为网站比赛的缘故，开始较为系统的学前后端，从阮一峰老师的博客得知他也在使用node开发，所以更加正好试试nod
      
    
    </summary>
    
      <category term="Node" scheme="https://hackeryard.github.io/categories/Node/"/>
    
    
  </entry>
  
  <entry>
    <title>安装python科学计算库 [windows下]</title>
    <link href="https://hackeryard.github.io/2017/05/14/install-scientific-lib-modules-in-windows/"/>
    <id>https://hackeryard.github.io/2017/05/14/install-scientific-lib-modules-in-windows/</id>
    <published>2017-05-13T16:35:13.000Z</published>
    <updated>2018-01-19T01:30:53.834Z</updated>
    
    <content type="html"><![CDATA[<p>由于今天数据挖掘练习的缘故，需要安装一些常用的科学计算库，如耳熟能详的numpy，scipy，sklearn，matplotlib，seaborn等。</p><p>本机python 32位版本3.6，使用pip3安装相关库，看到知乎上要说换用anaconda（附带python和一些扩展库），再用conda工具安装没有的库，可以很好的解决依赖问题。由于我对Python的依赖关系的管理没有深入了解，只依赖于pip或者easy_install的使用，所以当遇到pip安装某个库失败时，就有些无措了。</p><p>解决方法如下：</p><p>前往<a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/#numpy" target="_blank" rel="noopener">http://www.lfd.uci.edu/~gohlke/pythonlibs/#numpy</a>下载适合自己版本（我的是cp36，对应python3.6）的numoy+mkl（mkl是intel math kernal lib的意思，估计由于这样的原因，这种打包的numpy无法使用pip官方安装，也即就算pip install numpy成功了，当import scipy的时候，执行仍然报错，报错原因就是找不到numpy+mkl）</p><p>我用的校园网，实际下载速度只有15KB，而且经常断线且服务器不支持断点续传，所以很无奈。当想到有国内国外的vps，就挂上去看了下，使用</p><p>[c]wget <a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/xuoh7y4k/numpy-1.13.0rc1+mkl-cp36-cp36m-win32.whl[/c" target="_blank" rel="noopener">http://www.lfd.uci.edu/~gohlke/pythonlibs/xuoh7y4k/numpy-1.13.0rc1+mkl-cp36-cp36m-win32.whl[/c</a>]</p><p>发现404错误，用curl同样无法下载，苦闷中，发现用这个地址放到浏览器可以直接下载，所以应该是服务器屏蔽bot下载了，在wget后加</p><p>[c]–user-agent=&quot;Mozilla/5.0&quot; [/c]</p><p>即可。</p><p>通过<a href="https://www.filezilla.cn/" target="_blank" rel="noopener">sftp工具</a>下载到本机用pip3安装即可。</p><p>之后再安装其他依赖于mkl的库就没有问题了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;由于今天数据挖掘练习的缘故，需要安装一些常用的科学计算库，如耳熟能详的numpy，scipy，sklearn，matplotlib，seaborn等。&lt;/p&gt;
&lt;p&gt;本机python 32位版本3.6，使用pip3安装相关库，看到知乎上要说换用anaconda（附带pyth
      
    
    </summary>
    
      <category term="随想集" scheme="https://hackeryard.github.io/categories/%E9%9A%8F%E6%83%B3%E9%9B%86/"/>
    
    
  </entry>
  
  <entry>
    <title>15年某日手记</title>
    <link href="https://hackeryard.github.io/2017/04/16/some-tough-thoughts-in-2015/"/>
    <id>https://hackeryard.github.io/2017/04/16/some-tough-thoughts-in-2015/</id>
    <published>2017-04-16T15:22:14.000Z</published>
    <updated>2018-01-19T01:30:46.696Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>人这东西，要学会与自己相处，与欲望同行，无论魏晋。<br>欲望是什么？</p><p>软件不足，还想要更多更好的硬件。</p><p>在物质领域，这也是人们生生不息的追求吧。</p></blockquote><p>–6.25</p><blockquote><p>老师还是讲点玄学的好，这样才完美。</p></blockquote><p>–6.25</p><blockquote><p>今天我写下的东西，不能明天就看不下去。</p><p>一半花开，一半花落。</p><p>一些细节被永远的抹杀了，走着走着就忘记了曾经的自己（真实的）。</p></blockquote><p>–6.26</p><p>&nbsp;</p><blockquote><p>火已燃，心为之动，愿无悔。</p></blockquote><p>–不详</p><blockquote><p>一忌好为人师，二忌比来比去。</p><p>学习的基本单位是集体而非个人，在组织中，团体中每一个人需要成长和学习，并且是向着共同的目标奋进的。</p><p>优秀组织中的个人应该觉得自己属于一个比自我更强大的实体。</p></blockquote><p>–不详</p><blockquote><p>我更倾向于成为一个学者。</p></blockquote><p>–7.03</p><p>&nbsp;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;人这东西，要学会与自己相处，与欲望同行，无论魏晋。&lt;br&gt;欲望是什么？&lt;/p&gt;
&lt;p&gt;软件不足，还想要更多更好的硬件。&lt;/p&gt;
&lt;p&gt;在物质领域，这也是人们生生不息的追求吧。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;–6.25&lt;/p&gt;
&lt;bloc
      
    
    </summary>
    
      <category term="随想集" scheme="https://hackeryard.github.io/categories/%E9%9A%8F%E6%83%B3%E9%9B%86/"/>
    
    
  </entry>
  
  <entry>
    <title>apt-get笔记</title>
    <link href="https://hackeryard.github.io/2017/04/07/apt-get-bookmark/"/>
    <id>https://hackeryard.github.io/2017/04/07/apt-get-bookmark/</id>
    <published>2017-04-07T01:39:33.000Z</published>
    <updated>2018-01-19T01:31:13.693Z</updated>
    
    <content type="html"><![CDATA[<p>apt-get是debian下的简易安装工具，可以解决依赖问题，但在使用过程中，也遇到一些问题，与大家分享：</p><p><code>apt-get install xxx</code>之后，如果需要卸载此包，那么通过<code>apt-get remove xxx</code>之后，只是删除了二进制文件而已，还有配置和数据文件没有删除，这往往给我们带来麻烦，可以通过<code>apt-get  purge xxx</code>删除所有的关于包xxx的内容，另外，如果想同时删除安装xxx时安装的依赖包，可以通过<code>apt-get autoremove</code>来完全去除依赖。</p><p>另外推荐一个安装工具aptitude，它是apt-get的图形化版本，但是可以简单的解决删除安装包和依赖的问题：<code>aptitude remove xxx</code>，使用此方法的前提是通过aptitude安装xxx，即<code>aptitude install xxx</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;apt-get是debian下的简易安装工具，可以解决依赖问题，但在使用过程中，也遇到一些问题，与大家分享：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;apt-get install xxx&lt;/code&gt;之后，如果需要卸载此包，那么通过&lt;code&gt;apt-get remove xxx&lt;/c
      
    
    </summary>
    
      <category term="Ubuntu学习" scheme="https://hackeryard.github.io/categories/Ubuntu%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>MPICH 3.X安装简明指南（2）【ubuntu】</title>
    <link href="https://hackeryard.github.io/2017/04/07/mpich-3-x-easy-install-in-ubuntu-2/"/>
    <id>https://hackeryard.github.io/2017/04/07/mpich-3-x-easy-install-in-ubuntu-2/</id>
    <published>2017-04-07T01:22:50.000Z</published>
    <updated>2018-01-19T01:31:26.451Z</updated>
    
    <content type="html"><![CDATA[<p>本文基于Ubuntu 14.04安装mpich2，亲测有效：</p><blockquote><p>安装：</p></blockquote><p>[c]apt-get install mpich2 libmpich2-dev mpich2-doc[/c]</p><blockquote><p>测试：</p></blockquote><p>[c]which mpicc[/c]</p><p>一般返回：</p><p>[c] /usr/bin/mpicc[/c]</p><p>另外的步骤按照<a href="https://myard.org/runkingblog/2017/04/mpich-3-x-ealy-install-guide/" target="_blank" rel="noopener">第一篇文章</a>操作即可。</p><p>通过此方法安装的mpich版本为3.0.5，并非最新，可以通过以下命令查看：</p><p>[c]mpicc -v [/c]</p><p>&nbsp;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文基于Ubuntu 14.04安装mpich2，亲测有效：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;安装：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;[c]apt-get install mpich2 libmpich2-dev mpich2-doc[/c]&lt;/p&gt;
&lt;b
      
    
    </summary>
    
      <category term="MPICH TUTOR" scheme="https://hackeryard.github.io/categories/MPICH-TUTOR/"/>
    
    
  </entry>
  
</feed>
