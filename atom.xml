<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Spark Era Coming...</title>
  
  <subtitle>分享技术 记录生活</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://hackeryard.github.io/"/>
  <updated>2020-05-01T14:33:22.005Z</updated>
  <id>https://hackeryard.github.io/</id>
  
  <author>
    <name>Runking Hanna</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>密码保存里的学问</title>
    <link href="https://hackeryard.github.io/2020/05/01/best-practice-of-password-save/"/>
    <id>https://hackeryard.github.io/2020/05/01/best-practice-of-password-save/</id>
    <published>2020-05-01T11:49:06.000Z</published>
    <updated>2020-05-01T14:33:22.005Z</updated>
    
    <content type="html"><![CDATA[<p>对于用户密码保存，最佳实践是加盐和慢哈希，为什么要用这种方式？</p><p>一般的Web服务器都会在数据库中保存用户名密码，但如果网站存在漏洞而导致脱库，那数据库中的密码就会直接暴露，如果密码以明文的形式保存，那只能说太惨了（参见CSDN密码泄露事件）。</p><p>因为哈希函数具有很好的单向性，即已知消息，通过哈希函数能快速计算出对应的摘要，而反过来则困难得多得多，这就是哈希函数的不可逆性。所以可以用哈希函数对密码计算摘要，然后保存在数据库中，这样就算数据库被攻击者拿到了，密码也不会直接暴露。</p><p>需要补充的是，服务器拿到前台用户输入的明文密码（HTTPS加密传输），通过计算哈希的方式，与数据库中此用户的摘要比对，如果一致，则验证通过，否则拒绝登录。这里用到了哈希函数的抗碰撞性，即任意两个不同的数据，其摘要相同的可能性极低，或者换一种表述，对于一个数据P1，很难构造与P1不同的数据P2，使得Hash(P2)=Hash(P1)。所以只要匹配到了摘要相等，就可以认为密码是正确的。</p><p>但因为对于选定的哈希函数（如常用的MD5、SHA-1、SHA-512），数据和摘要是一一对应的，所以攻击者想到了针对所有数据，依次计算出相应的摘要，然后把摘要作为key，数据作为value，存储起来，这就是彩虹表(Rainbow Table)。彩虹表是一种以空间换时间的方法，同时使用了更多的技术，稍后补充。</p><p>攻击者利用现有的彩虹表，一般可以获得对常用用户密码快速的破解，因此需要寻求对抗的方法。需要注意，这里的破解是针对整个用户表，也即所有用户的破解，是一种无差别攻击。按照成本收益考虑，攻击的成本就是下载或构造彩虹表，以及匹配的成本，这种成本在当今的算力和存储成本下是较少的，同时，收益是破解所有用户密码带来的收益，如果用户够多，则单个用户的成本收益比会降低很多。</p><p>因为在安全领域，如果攻击一个东西的成本收益不匹配，那么攻击者就是自找没趣。所以问题在于，我们能不能提高单个用户的成本收益比？既然之前是对所有用户都无差别地计算哈希，那我们能不能加点东西，把无差别攻击降级为针对性攻击呢？</p><p>这就是加盐：即对每个用户，都生成一个随机字符串(salt)。把salt拼接到密码上，再使用MD5等算法计算哈希，即saltHash=MD5(passwd+salt)。另一种方式是，saltHash=MD5(MD5(passwd),salt)。</p><p>这样，就算构造彩虹表，也需要针对每个用户的salt构造，单个用户的成本收益比显著提高了，这就是针对性攻击。</p><p>通过加盐，攻击成本大大提高了，但针对短密码，攻击者仍然可以暴力破解，即枚举所有的密码组合，加盐后计算哈希。为了对抗这种攻击，一种慢哈希算法被发明，这就是bcrypt和pdkdf2，拿bcrypt说明，bcrypt有一个cost参数，通过调节cost，可以提高或降低计算哈希的时间，目前bcrypt的时间大概在0.3s，如果未来算力提高，我们可以提高cost，来维持计算哈希的时间不变。对比MD5，暴力破解bcrypt的时间成本非常大，如果是8位字母数字组成的密码，则需要(26<em>2 + 10) ^ 8 \</em> 0.3s / (365<em>24</em>60*60) = 51万年，攻击者早就不知道在哪了。</p><p>另外，使用bcrypt后，每次计算都需要0.3s，如果放在后台服务器处理，则需要的计算量是很大的，参考知乎CoderZh的<a href="https://www.zhihu.com/question/20299384/answer/81065976" target="_blank" rel="noopener">设计</a>，bcrypt可以放在客户端，从而分担服务器的压力，不得不说很巧妙。</p><p>这种加盐和慢哈希的方法被用在了很多地方，如Linux的/etc/shadow文件，其中用户密码保存为：$id$salt$encrypted，id表示具体的哈希函数，encrypted是摘要，我在Ubuntu 18中看到，默认的id=6，对应SHA-512。</p><p>在OpenBSD中，则默认使用bcrypt作为密码哈希函数，这里有<a href="https://en.wikipedia.org/wiki/Bcrypt" target="_blank" rel="noopener">bcrypt</a>的介绍，有空了看看论文实现。</p><p>参考：</p><p>1.黄兢成，<a href="https://zhuanlan.zhihu.com/p/20407064" target="_blank" rel="noopener">谈谈密码安全：服务端密码保存</a></p><p>2.CoderZh，<a href="https://www.zhihu.com/question/20299384/answer/81065976" target="_blank" rel="noopener">加盐密码保存的最通用方法是？</a></p><p>3.<a href="https://cnodejs.org/topic/547730ec65e5a201268b9265" target="_blank" rel="noopener">密码保存的最佳实践讨论</a></p><p>4.Smallay，<a href="https://www.zhihu.com/question/19790488/answer/19290308" target="_blank" rel="noopener">什么是彩虹表？</a></p><p>5.Wikipedia: <a href="https://en.wikipedia.org/wiki/Bcrypt" target="_blank" rel="noopener">bcrypt</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;对于用户密码保存，最佳实践是加盐和慢哈希，为什么要用这种方式？&lt;/p&gt;
&lt;p&gt;一般的Web服务器都会在数据库中保存用户名密码，但如果网站存在漏洞而导致脱库，那数据库中的密码就会直接暴露，如果密码以明文的形式保存，那只能说太惨了（参见CSDN密码泄露事件）。&lt;/p&gt;
&lt;p&gt;因
      
    
    </summary>
    
    
      <category term="密码学" scheme="https://hackeryard.github.io/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>linux-init</title>
    <link href="https://hackeryard.github.io/2020/05/01/linux-init/"/>
    <id>https://hackeryard.github.io/2020/05/01/linux-init/</id>
    <published>2020-05-01T10:16:37.000Z</published>
    <updated>2020-05-01T10:16:37.581Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>理解HTTPS协议</title>
    <link href="https://hackeryard.github.io/2020/05/01/network-encrypt-protocol/"/>
    <id>https://hackeryard.github.io/2020/05/01/network-encrypt-protocol/</id>
    <published>2020-05-01T07:04:33.000Z</published>
    <updated>2020-05-01T07:05:23.841Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Nginx事件驱动框架</title>
    <link href="https://hackeryard.github.io/2020/04/30/nginx-event-loop/"/>
    <id>https://hackeryard.github.io/2020/04/30/nginx-event-loop/</id>
    <published>2020-04-30T14:15:26.000Z</published>
    <updated>2020-04-30T14:35:41.771Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="NGINX" scheme="https://hackeryard.github.io/tags/NGINX/"/>
    
  </entry>
  
  <entry>
    <title>关于TCP的一切</title>
    <link href="https://hackeryard.github.io/2020/04/29/network-tcp/"/>
    <id>https://hackeryard.github.io/2020/04/29/network-tcp/</id>
    <published>2020-04-29T13:34:03.000Z</published>
    <updated>2020-04-30T12:56:08.721Z</updated>
    
    <content type="html"><![CDATA[<p>TCP是传输控制协议的缩写，这里的控制，就是流量控制、拥塞控制和差错控制。TCP是可靠的传输协议，它用了很多机制，来保证传输的可靠性，包括：</p><h2 id="1-差错控制"><a href="#1-差错控制" class="headerlink" title="1.差错控制"></a>1.差错控制</h2><h3 id="1-1-校验和"><a href="#1-1-校验和" class="headerlink" title="1.1 校验和"></a>1.1 校验和</h3><p>检测数据包在传输过程中，是否受到破坏，如果被破坏，接收方会丢弃数据包，并等待数据包超时重传。</p><h3 id="1-2-序列号"><a href="#1-2-序列号" class="headerlink" title="1.2 序列号"></a>1.2 序列号</h3><p>对每个字节编号，是TCP的核心。TCP基于序列号，实现了对每个字节的发送、接收和确认应答，接收方据此实现了对乱序包的重排序，另外，对重复接收的数据包，接收方会知道这是重复的包，会直接丢弃而不会对已有数据造成影响（如果不对字节编号，那么重复收到的数据包，可能被当做新数据包处理）。</p><p>序列号是滑动窗口机制的基础，将在1.5节介绍。</p><h3 id="1-3-确认应答机制"><a href="#1-3-确认应答机制" class="headerlink" title="1.3 确认应答机制"></a>1.3 确认应答机制</h3><p>因为网络是不可靠的，确认应答可以帮助接收方确切地知道ACK号之前的字节序列都已经收到了。</p><h3 id="1-4-超时重传"><a href="#1-4-超时重传" class="headerlink" title="1.4 超时重传"></a>1.4 超时重传</h3><p>重传有两种，这一节只介绍超时重传，快速重传在拥塞控制中介绍。<br>TCP会维护一个RTO(Retransmission TimeOut)，即超时重传计时器，针对每一个发送出去的数据包，都会维护一个RTO，当RTO超时到达，但还没有接收到相应的ACK时，发送方就会重传这个数据包（由此可知，在发送方窗口的左侧，是已发送，未接收ACK确认的数据，这些数据需要一直保存，直到这些数据被确认为止，此时窗口的左边界开始右移，称为滑动）</p><p>超时重传要解决的问题是，a.如果发送的数据包在链路中丢失了，接收方没有收到，发送方能在RTO超时后，估计出是数据包丢失了，就会重传；b.确认应答报文ACK也有可能丢失，TCP的设计是把超时重传放在发送方，如果超时，发送方重传数据包，接收方发现这是重复的数据，就知道是ACK丢失了，就会丢弃它，并立即重传ACK。这里之所以把超时重传放在发送方，是因为发送方对数据包丢失和ACK丢失，都可以处理，而接收方感知不到数据包是否丢失，同时，如果要实现对ACK的重传，则需要接收方在ACK重传计时器内发回一个消息（发送方：我收到了你的ACK），这是对ACK的确认，这无疑增加了TCP的复杂性。</p><p>这里还有一个问题，如果没有超时重传，会发生什么？那么发送方在发送一个数据包后，如果丢包，接收方是感知不到的，它处于等待状态，发送方如果不设置计时器，也会一直等待对方的ACK，此时，死循环发生了。超时机制的引入，打破了死循环，让传输可以继续下去。</p><p>RTO的计算：RTO应该略大于RTT。我们都知道RTT是Round Trip Time，即往返时间，如果按照一个数据包一个ACK的模式，发送方最好需要等待略大于RTT的时间内，没收到ACK，才认为需要重传。如果RTO小于RTT，则发生无效的重传，如果RTO远大于RTT，则由于等待时间过长，带宽得不到很好的利用。</p><p>针对一条连接中网络的状况是不断发生变化的，RTT也会由于路由器的队列长度而产生波动，所以RTO也是动态的，以适应这种变化。</p><h4 id="RFC793"><a href="#RFC793" class="headerlink" title="RFC793"></a>RFC793</h4><p>在第一版的TCP <a href="https://tools.ietf.org/html/rfc793" target="_blank" rel="noopener">RFC793</a>中，需要采样最新的一次RTT，同时维护一个平滑RTT(SRTT)的值，每次采样到了最新的RTT，就会更新SRTT，SRTT用来计算RTO：</p><p>SRTT = (α * SRTT) + ((1- α) * RTT)，0.8&lt;α&lt;0.9</p><p>RTO = min[UBOUND, max[LBOUND, (β * SRTT)]]，1.3&lt;β&lt;2.0</p><h4 id="Karn算法"><a href="#Karn算法" class="headerlink" title="Karn算法"></a>Karn算法</h4><p>上述算法存在一个问题，在采样RTT的时候，涉及重传的RTT是否需要采样？</p><p>因为我们不知道第一个收到的ACK究竟是对原始数据包的确认，还是对重传数据包的确认，不管采用前者还是后者，计算出的RTT都是不准确的。Karn算法直接跳过对涉及重传的RTT的采样（此处的涉及两字，是为了表述不对原始数据包、重传数据包和第一个ACK做采样）。</p><p>但Karn算法有一个严重的问题，假设这样一个场景，发送方同时发送了几个数据包，RTO刚开始是较小的（假设200ms），但网络负担突然加重，延时增加，RTT变为1000ms，由此发送方在200ms超时后重传所有数据包，而由于Karn算法不对涉及重传的RTT采样，所以SRTT是不更新的，由此RTO也不会更新，发送方无法更新RTO来适应网络的变化，而是继续无谓的重传，同时加重网络的负担。</p><p>为了解决这个问题，Karn算法提出每次超时重传后，重置RTO为之前的两倍，这也是我们今天仍在使用的机制。</p><h4 id="Jacobson算法"><a href="#Jacobson算法" class="headerlink" title="Jacobson算法"></a>Jacobson算法</h4><p>上述两个算法使用SRTT，但由于0.8&lt;α&lt;0.9，可以发现SRTT对历史值的依赖度很高，对最新采样的RTT的权重很低，这就导致了它无法及时检测RTT大的抖动，如果网络环境就此发生较长期的变化，那么SRTT需要在多次RTT之后，才能更新到接近真实的RTT，这增加了自适应的时间，如果RTT减少较多，则无法及时降低RTO，而浪费了带宽，如果RTT增加较多，则无法及时增加RTO，从而增加了重传。</p><p>SRTT = SRTT + α * (RTT – SRTT)</p><p>DevRTT = (1-β) * DevRTT + β * (|RTT-SRTT|)</p><p>RTO= µ * SRTT + ∂ * DevRTT</p><p>Linux使用的上述公式的参数是α = 0.125，β = 0.25，μ = 1，∂ = 4</p><p>带入到RTO计算公式，可知RTO对DevRTT的考虑是充分的，而DevRTT对|RTT-SRTT|的考虑虽然只有0.25，但加上RTO公式中∂=4的放大，对RTT差值的考虑是较为充分的，即可以及时检测RTT大的抖动，并调整RTO适应网络环境。</p><h3 id="1-5-滑动窗口"><a href="#1-5-滑动窗口" class="headerlink" title="1.5 滑动窗口"></a>1.5 滑动窗口</h3><p>同时，如果TCP采用最原始的一次数据传输一次ACK后，才能继续发送，则吞吐量是很低的，很多时间都在等待ACK中度过。为了提高网络的吞吐量，TCP引入窗口的概念，窗口是不等待ACK，而可以发送的最大数据量。发送方窗口如下：<br><img src="/images/tcp-send-window.png" alt="tcp-send-window"><br>(来源：《The TCP-IP Guide》)</p><p>#1 已发送 已确认 这部分数据不再维护 发送窗口外 缓冲区外</p><p>#2 已发送 未确认 缓冲区内（需要保存这些数据，以备重传）发送窗口内</p><p>#3 未发送 在接收方可处理范围内 规定了上层应用可以发送的数据量 缓冲区内 发送窗口内</p><p>#4 未发送 上层应用可以继续填满缓冲区 这部分数据不在接收方可处理范围内 缓冲区内 发送窗口外</p><p>在接收到ACK（累计确认）后，发送方窗口左边界右移，经过确认的数据不再维护。窗口的右边界是否移动，则取决于接收方ACK中报告的窗口大小，如果窗口不变，表明接收方处理了这些字节，发送方右边界右移这么多字节，如果窗口变小，则说明接收方处理较慢，发送方根据这个窗口调整发送窗口即可。<br>窗口左右移动的过程，称为「滑动」。</p><p>在接收方，窗口的示意图如下：<br><img src="/images/tcp-recv-window.png" alt="tcp-recv-window"><br>(来源：小林coding)</p><p>#1#2 已接收 如果有ack丢失的 对方重传后 回一个dup ack即可 缓冲区内</p><p>#3 未接收 但可以接收 这部分等于接收窗口的大小 缓冲区内</p><p>#4 未接收 缓冲区外 这意味着只要上层应用读取了#1#2中的数据，接收窗口的右界就会右移，即有更多的缓冲区可以接收数据，相应的，接收窗口的大小也会扩大</p><p>接收方的窗口要简单一些，窗口大小就是#3，需要注意的是，#1#2中的数据会保存在缓冲区，等待上层应用读取后再回收，如果上层应用一直不读取，随着数据的接收，缓冲区大小会减少为0，此时可接收窗口大小也是0，接收方会马上回复一个window=0的ACK报文。此时发送方停止发送数据，并每个一段时间发送一个Zero Window Probe探测报文(Len=1，但对方不需要对这个序列号确认)，接收方回复Zero Window Probe ACK报文，及时报告窗口大小，如果有可用窗口，发送方就继续发送数据。</p><p>此处就引入了糊涂窗口综合征(Silly Window Syndrome)的概念，如果接收方在接收窗口为0后，上层应用处理了很少的几个字节，就报告窗口给发送方，发送方立即发送这几个字节，则数据的传输效率是很低的，这里Header(Ethernet 14 + IP 20 + TCP 20)就有54字节，只传送几个字节的有效数据，是低效的。</p><p>类似的问题也会发生在接收方，如果接收方的窗口越来越小，每次发送的数据越来越少，数据的传输效率就越来越低，以至于不值得这么做。</p><p>上述两种症状称之为糊涂窗口综合征。如何解决？分别在接收方和发送方解决即可：</p><p>1.接收方不报告小窗口，而是等到可接受窗口大小&gt;=MSS时，才报告窗口变化。</p><p>2.发送方不发送小数据，著名的Nagle算法就是这么做的，即在窗口大小&gt;=MSS并且可发送数据&gt;=MSS时，才发送数据，如果不满足这个条件，则检查所有已发送数据的ACK是否收到，只有收到才发送数据，否则缓存上层应用的数据。</p><p>需要注意，Nagle算法由于延迟发送的特性，它跟延迟确认(Delayed ACK)算法是水火不容的。在发送方上层应用发送小数据时，TCP会缓存这些小数据，直到之前所有数据的ACK都接收到，但延迟确认则正好相反，既然多次ACK是一种浪费，那我就等待下一次数据到达后再发送ACK。这样，发送方等待对方的ACK，接收方等待对方的下一次数据，这就死锁了。</p><p>另外，Nagle算法由于会缓存小数据，而一些特定的交互场景，如应用层的SSH等，本身就需要快速传输小数据，那么就需要关闭Nagle，具体是在setsockopt中设置TCP_NODELAY的选项。</p><h2 id="2-流量控制"><a href="#2-流量控制" class="headerlink" title="2.流量控制"></a>2.流量控制</h2><p>发送方不能发送超过接收方处理能力的数据，这就是流量控制要做的。<br>TCP基于滑动窗口，实现对数据的高效发送，基于发送方报告窗口的机制，得知当前可发送窗口的大小，来控制发送方的发送速度。<br>其他内容在滑动窗口一节已经介绍。</p><h2 id="3-拥塞控制"><a href="#3-拥塞控制" class="headerlink" title="3.拥塞控制"></a>3.拥塞控制</h2><p>拥塞控制是独立于流量控制的，流量控制的目的，是让发送方不会发送超过接收方处理能力的数据，这是收发双方的事情，而拥塞控制则考虑到了链路的状况，即是否发生了拥塞。一旦检测到发生了拥塞，TCP就会通过拥塞控制算法，降低发送速率，网络中的用户都会在拥塞发生后，主动降低自己的发送速率，而不是保持发送速率，否则将会给路由器造成更大的压力，造成RTT增大，丢包剧增，丢包导致的重传，会继续加重网络的负担，最终让整个网络崩溃。</p><p>而降低发送速率，则给链路中的瓶颈路由器增加处理的时间，等路由器处理掉排队数据包之后，网络就会恢复正常，此时TCP再增加发送量即可。</p><p>那如何做具体的拥塞控制呢？主要有四个算法：慢启动，拥塞避免，拥塞发生，快速恢复，英文版Congestion Control的介绍在<a href="https://tools.ietf.org/html/rfc2001" target="_blank" rel="noopener">RFC2001</a>。</p><p>首先介绍拥塞窗口(Congestion Window，简称cwnd)，发送方窗口swnd = min(rwnd, cwnd)，这里cwnd也能限制发送方发送数据的行为。cwnd默认以MSS为单位，MSS在以太网中一般设置为1460。</p><h3 id="慢启动"><a href="#慢启动" class="headerlink" title="慢启动"></a>慢启动</h3><p>TCP三次握手，开始发送数据时，首先从cwnd=1开始发送，然后每接收到一个ACK，cwnd加1，在一个RTT后，cwnd等于2，此时可以连续发送两个MSS，又过了一个RTT，发送方接收到了两个ACK，则变更cwnd=2+2，此时可以连续发送四个MSS，又过了一个RTT，接收到四个ACK，则cwnd=4+4…</p><p>慢启动过程就是每个RTT后，cwnd都翻倍，直到到达慢启动阈值(ssthresh, slow-start threshold)，随之进入拥塞避免阶段。</p><p>为什么要进行慢启动？因为刚加入网络的TCP代理并不知道网络的状况，所以就从一个很低的cwnd逐渐增长，来探测网络的状况。</p><p>相对于直接发送大量的数据包，慢启动是一个温和的过程，不会对网络中其它TCP代理造成很大的抖动，其它代理检测到网络拥塞后，也可以温和地调整拥塞窗口大小（而非一个新加入的TCP代理大量发包，导致路由器队列满，其它代理丢包超时重传，这个影响是很大的，如果用传统的拥塞发生算法（如下），则直接cwnd重置为1）</p><h3 id="拥塞避免"><a href="#拥塞避免" class="headerlink" title="拥塞避免"></a>拥塞避免</h3><p>拥塞避免算法是为了当cwnd大于等于ssthresh时，进入拥塞避免阶段，发送方每接收一个ACK，cwnd+=1/cwnd，这就意味着，在一个RTT后，cwnd=cwnd+1，即随着RTT的增加，cwnd线性增加。</p><p>这种线性增加的算法称之为加性增(Additive increase)，与之对应的拥塞发生算法是乘性减(Multiplicative decrease)，它们合称为AIMD。使用这种控制算法的好处是共享链路中的所有TCP流，都可以最后收敛到均分带宽的目的。(from Wikipedia: Multiple flows using AIMD congestion control will eventually converge to use equal amounts of a contended link.)</p><p>回到拥塞避免上，当cwnd随着RTT缓慢增长时，总会遇到一个极限，因为链路中总会存在一个瓶颈路由器，它的处理能力是有限的。但这个路由器的队列满，就开始丢包，发送方在RTO内没有接收到ACK，就会重传，此时进入拥塞发生时对超时重传的处理阶段。</p><p>另外，如果发送方收到了3个重复的ACK(duplicate ACK)，则进入拥塞发生时的快速重传和快速恢复阶段。</p><h3 id="拥塞发生"><a href="#拥塞发生" class="headerlink" title="拥塞发生"></a>拥塞发生</h3><p>早期TCP对拥塞发生的判断是基于丢包的。</p><p>一旦丢包，就会进入拥塞发生算法，有两种机制处理拥塞的发生，一种是针对超时重传，此时TCP认为网络发生了较为严重的拥塞，就会马上降低发送速度，具体是设置ssthresh=cwnd/2，cwnd=1，也就是说，从头开始慢启动，到之前慢启动门限的一半，再进入拥塞避免阶段。</p><h3 id="快速恢复和快速重传"><a href="#快速恢复和快速重传" class="headerlink" title="快速恢复和快速重传"></a>快速恢复和快速重传</h3><p>另一种是针对快速重传，此时TCP认为既然丢失的包之后的三个不同的包都收到了，说明网络的拥塞没那么严重，此时TCP会降低发送速度，但降低得没超时重传那么大，具体是设置ssthresh=cwnd/2, cwnd=ssthresh+3，为什么是加了3，因为三个重复ACK已经收到了。</p><p>接下来算法的过程如下：<br>1.每当收到了重复ACK，cwnd加1；<br>2.新的ACK到达，说明前面快速重传的数据包被接收，此时设置cwnd=ssthresh，进入拥塞避免阶段。这里我看不明白，既然已经接收到新的ACK，为什么cwnd反而降低了？</p><h3 id="拥塞控制中的信号"><a href="#拥塞控制中的信号" class="headerlink" title="拥塞控制中的信号"></a>拥塞控制中的信号</h3><p>拥塞控制中的信号(signal)概念，在1988年SIGCOMM的论文《Congestion Avoidance and Control》中，作者写道：拥塞控制的条件有两个，其一是网络必须有能力通知(signal)终端(endpoints)，拥塞已经发生或将要发生，其二是终端必须实现拥塞控制的策略，以在信号到达时降低发送速率，在信号消失时，提高发送速率。</p><p>我们结合上述介绍的传统算法，把丢包看成是一个发生拥塞的信号，丢包发生时，降低发送速率，丢包消失时（每次接收到ACK可以看成是与丢包相反的信号），提高发送速率。</p><p>这里的丢包是一种大概率的丢包，比如说，在网络中，丢包有三种情况：1.路由器丢包，发生拥塞，2.时延突然增大导致RTO超时，3.数据包在噪音信道中极小概率的被破坏。</p><p>第三种情况可以忽略，因为概率太小了，远小于1%，这还只是当时的网络环境的测量结果。第二种情况也可以忽略了，超时应该尽快重传，而不是等待这个数据包在环游网络的某个神奇的时刻到达，所以如果丢包，我们可以认定就是路由器丢包，网络发生了拥塞。</p><p>而RTO是根据RTT动态维护的，如果我们有一个合理的RTO，就可以等同于认为只要RTO超时，就发生了丢包。另一种关于丢包的假设是在发送方收到三个重复ACK时，重复ACK是用来指示乱序到达的，如果只收到了一个或两个重复ACK，很有可能只是乱序，并没有丢包，此时TCP是不会触发快速重传的，它在等待更多的重复ACK到达。如果更多(大于等于三个)的重复ACK收到，则丢包的概率就很大了，此时触发快速重传就比较合理了。</p><p>关于拥塞控制算法，根据Jacobson关于拥塞控制的两个条件，我们还可以想到更多的拥塞控制算法，比如，基于时延(Delay)的拥塞控制算法，如大名鼎鼎的BBR，基于路由器主动通知的拥塞控制算法，如ECN(Explicit Congestion Notification, 显示拥塞通知)。此外，基于丢包(Loss)的拥塞控制算法有很多改进版本，如被Linux使用的BIC、CUBIC等。</p><p>参考文献：</p><p>1.Jacobson，1988，<a href="https://dl.acm.org/doi/pdf/10.1145/52325.52356" target="_blank" rel="noopener">Congestion Avoidance and Control</a></p><p>2.陈皓，<a href="https://coolshell.cn/articles/11609.html" target="_blank" rel="noopener">TCP那些事儿</a></p><p>3.小林coding，<a href="https://www.nowcoder.com/discuss/414727" target="_blank" rel="noopener">TCP重传、滑动窗口、流量控制、拥塞控制</a></p><p>4.ricardoleo，<a href="https://blog.csdn.net/liuchenxia8/article/details/80428157" target="_blank" rel="noopener">TCP协议-如何保证传输可靠性</a></p><p>5.陶辉笔记，<a href="http://www.taohui.pub/2019/08/07/%E4%B8%80%E6%96%87%E8%A7%A3%E9%87%8A%E6%B8%85%E6%A5%9Agoogle-bbr%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86/" target="_blank" rel="noopener">关于路由器队列</a></p><p>6.Wikipedia: <a href="https://en.wikipedia.org/wiki/Additive_increase/multiplicative_decrease" target="_blank" rel="noopener">AIMD</a></p><p>7.henrystark，<a href="http://blog.chinaunix.net/uid-28387257-id-4543179.html" target="_blank" rel="noopener">AIMD：公平性和收敛性</a></p><p>8.Wikipedia: <a href="https://en.wikipedia.org/wiki/TCP_congestion_control#Algorithms" target="_blank" rel="noopener">常见的拥塞控制算法一览表</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;TCP是传输控制协议的缩写，这里的控制，就是流量控制、拥塞控制和差错控制。TCP是可靠的传输协议，它用了很多机制，来保证传输的可靠性，包括：&lt;/p&gt;
&lt;h2 id=&quot;1-差错控制&quot;&gt;&lt;a href=&quot;#1-差错控制&quot; class=&quot;headerlink&quot; title=&quot;1.
      
    
    </summary>
    
    
      <category term="Network" scheme="https://hackeryard.github.io/tags/Network/"/>
    
  </entry>
  
  <entry>
    <title>不重复元素的全排列</title>
    <link href="https://hackeryard.github.io/2020/04/27/permutations/"/>
    <id>https://hackeryard.github.io/2020/04/27/permutations/</id>
    <published>2020-04-27T04:17:11.000Z</published>
    <updated>2020-04-27T04:59:37.446Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>给定一个没有重复数字的序列，返回其所有可能的全排列。</p><p>示例:</p><p>输入: [1,2,3]<br>输出:<br>[<br>  [1,2,3],<br>  [1,3,2],<br>  [2,1,3],<br>  [2,3,1],<br>  [3,1,2],<br>  [3,2,1]<br>]</p><p>来源：<a href="https://leetcode-cn.com/problems/permutations" target="_blank" rel="noopener">LeetCode</a></p><h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><p>回溯的基本框架：1.当前已走路径，2.当前可选路径列表，3.结束条件（符合条件或到达决策树底部）。在回溯函数内，for循环可选路径。</p><p>时间复杂度：有N!个不同的排列（N!次调用回溯函数），每个排列复制到结果集合，需要O(N)，所以最后时间复杂度为O(N*N!)</p><p>严格按照框架写，如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">``</span><br><span class="line"></span><br><span class="line">## 解法二</span><br><span class="line">同样利用回溯法，在全排列中，当前路径保存在nums[<span class="number">0</span>,begin<span class="number">-1</span>]中，可选路径列表为[begin,end]，则<span class="keyword">for</span>循环[begin,end]，最后begin=end，本次回溯结束。</span><br><span class="line"></span><br><span class="line">```c++</span><br><span class="line">class Solution &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; permute(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; res;</span><br><span class="line">        <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        helper(res, nums, <span class="number">0</span>, n<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">helper</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; &amp; res, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; nums, <span class="keyword">int</span> begin, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(begin == end) &#123;</span><br><span class="line">            res.push_back(nums);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = begin; i &lt;= end; i++) &#123;</span><br><span class="line">            <span class="comment">// 做选择</span></span><br><span class="line">            swap(nums[i], nums[begin]);</span><br><span class="line">            helper(res, nums, begin+<span class="number">1</span>, end);</span><br><span class="line">            <span class="comment">// 撤销选择到原始状态</span></span><br><span class="line">            swap(nums[i], nums[begin]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;p&gt;给定一个没有重复数字的序列，返回其所有可能的全排列。&lt;/p&gt;
&lt;p&gt;示例:&lt;/p&gt;
&lt;p&gt;输入: [1,2,3]&lt;br&gt;输出
      
    
    </summary>
    
    
      <category term="LeetCode" scheme="https://hackeryard.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>子集</title>
    <link href="https://hackeryard.github.io/2020/04/27/subsets/"/>
    <id>https://hackeryard.github.io/2020/04/27/subsets/</id>
    <published>2020-04-27T01:27:39.000Z</published>
    <updated>2020-04-27T05:03:47.413Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>给定一组不含重复元素的整数数组 nums，返回该数组所有可能的子集（幂集）。</p><p>说明：解集不能包含重复的子集。</p><p>示例:</p><p>输入: nums = [1,2,3]<br>输出:<br>[<br>  [3],<br>  [1],<br>  [2],<br>  [1,2,3],<br>  [1,3],<br>  [2,3],<br>  [1,2],<br>  []<br>]</p><p>来源：<a href="https://leetcode-cn.com/problems/subsets" target="_blank" rel="noopener">LeetCode</a></p><h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><p>对于子集问题，对每一个元素，我们都有选和不选两种选择，如何模拟这两种选择？可以使用递归回溯，递归参数保存了当前待访问的元素索引，临时子集保存在vector中，递归出口是当前待访问的索引为数组的长度，则保存临时子集的结果。</p><p>回溯法是一种递归寻找符合要求的解的方法，适用的问题是决策树类型，即在决策树怎么一步一步遍历。回溯的框架需要考虑三个变量：1.当前已走路径，2.当前可选路径列表，3.结束条件（符合条件或到达决策树底部）。</p><p>在下述代码中，have保存当前已走路径，可选路径只有两条，那就是对当前元素，走还是不走。不走，则对应一个回溯函数，回溯到底部，并保存结果；走，则保存当前元素到have中，回溯返回后，对撤销have中已选的当前节点，回到上一个状态（为什么撤销，这里have是引用类型，是为了节省形参内存，不是引用类型，那么撤不撤销都不会影响下一次选择）</p><p>时间复杂度：有2^n个子集（2^n次调用回溯函数），每个子集复制到结果集合，需要O(n)，所以最后时间复杂度为O(n*2^n)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; res;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; subsets(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; have;</span><br><span class="line">        helper(nums, have, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">helper</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; have, <span class="keyword">int</span> index)</span> </span>&#123; <span class="comment">// from 0</span></span><br><span class="line">        <span class="keyword">if</span>(index == nums.size()) &#123;</span><br><span class="line">            <span class="comment">// 递归出口 保存结果</span></span><br><span class="line">            res.push_back(have);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        helper(nums, have, index+<span class="number">1</span>); <span class="comment">// 不使用当前元素</span></span><br><span class="line">        have.push_back(nums[index]); <span class="comment">// 使用当前元素</span></span><br><span class="line">        helper(nums, have, index+<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 当前选择不会对下一次选择产生影响</span></span><br><span class="line">        have.pop_back(); <span class="comment">// 每次have在helper输入输出中是不变的</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;p&gt;给定一组不含重复元素的整数数组 nums，返回该数组所有可能的子集（幂集）。&lt;/p&gt;
&lt;p&gt;说明：解集不能包含重复的子集。&lt;
      
    
    </summary>
    
    
      <category term="LeetCode" scheme="https://hackeryard.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>最接近的三数之和</title>
    <link href="https://hackeryard.github.io/2020/04/27/three-sum-closest/"/>
    <id>https://hackeryard.github.io/2020/04/27/three-sum-closest/</id>
    <published>2020-04-26T23:36:10.000Z</published>
    <updated>2020-04-26T23:51:13.526Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><hr><p>给定一个包括 n 个整数的数组 nums 和 一个目标值 target。找出 nums 中的三个整数，使得它们的和与 target 最接近。返回这三个数的和。假定每组输入只存在唯一答案。</p><p>例如，给定数组 nums = [-1，2，1，-4], 和 target = 1.</p><p>与 target 最接近的三个数的和为 2. (-1 + 2 + 1 = 2).</p><p>来源：<a href="https://leetcode-cn.com/problems/3sum-closest" target="_blank" rel="noopener">LeetCode</a></p><h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><p>暴力法三次循环，时间复杂度是O(N^3)，如何降低复杂度？我们知道，在数组无序的情况下，只能采用这种遍历的方法，没有启发式搜索的信息。所以先排序，之后每个元素i，都依次遍历其[i+1,n]范围内的和，保存最接近target的和，遍历结束后输出即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">threeSumClosest</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        <span class="keyword">if</span>(n &lt;= <span class="number">2</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        sort(nums.begin(), nums.end());</span><br><span class="line">        <span class="keyword">int</span> min_diff = INT_MAX;</span><br><span class="line">        <span class="keyword">int</span> closest_sum;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> left = i+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> right = n<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">while</span>(left &lt; right) &#123;</span><br><span class="line">                <span class="comment">// calc diff</span></span><br><span class="line">                <span class="keyword">int</span> sum = nums[i] + nums[left] + nums[right];</span><br><span class="line">                <span class="keyword">int</span> diff = <span class="built_in">abs</span>(target-sum);</span><br><span class="line">                <span class="keyword">if</span>(diff &lt; min_diff) &#123;</span><br><span class="line">                    min_diff = diff;</span><br><span class="line">                    closest_sum = sum;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(sum == target) &#123;</span><br><span class="line">                    <span class="comment">// 必然是最小的 直接返回则节省时间</span></span><br><span class="line">                    <span class="keyword">return</span> sum;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &gt; target) &#123;</span><br><span class="line">                    --right;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    ++left;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="comment">// end while</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> closest_sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;给定一个包括 n 个整数的数组 nums 和 一个目标值 target。找出 nums 中的三个整数，使得它们的和
      
    
    </summary>
    
    
      <category term="LeetCode" scheme="https://hackeryard.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>最接近的两数之和</title>
    <link href="https://hackeryard.github.io/2020/04/26/two-sum-closest/"/>
    <id>https://hackeryard.github.io/2020/04/26/two-sum-closest/</id>
    <published>2020-04-26T15:15:56.000Z</published>
    <updated>2020-04-26T15:35:48.252Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><hr><p>给定一个包括 n 个整数的数组 nums 和 一个目标值 target。找出 nums 中的两个整数，使得它们的和与 target 最接近。返回这两个数的和。假定每组输入只存在唯一答案。</p><p>例如，给定数组 nums = [-1，2，1，-4], 和 target = 1.</p><p>与 target 最接近的两个数的和为 1. (-1 + 2 = 1).</p><h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><hr><p>暴力破解，需要O(N^2)的时间复杂度，能不能降低？我们知道在乱序情况下，只能做到两个循环去遍历，如果排序，则可能可以利用头尾指针去智能化地遍历（和大于target则右指针左移，小于target则左指针右移），这样只需要O(N)的复杂度，加上排序复杂度O(NlogN)，最后复杂度是O(NlogN)<br>头尾双指针算法的正确性如何证明？我们要找最接近的两数之和，如此移动，如果能证明不会错失最优解即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 返回最接近的两数之和</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">twoSumClosest</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        <span class="keyword">if</span>(n &lt;= <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        sort(nums.begin(), nums.end());</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> min_diff = INT_MAX;</span><br><span class="line">        <span class="keyword">int</span> closest_sum;</span><br><span class="line">        <span class="keyword">while</span>(left &lt; right) &#123;</span><br><span class="line">            <span class="keyword">int</span> sum = nums[left] + nums[right];</span><br><span class="line">            <span class="keyword">int</span> diff = <span class="built_in">abs</span>(sum - target);</span><br><span class="line">            <span class="keyword">if</span>(diff &lt; min_diff) &#123;</span><br><span class="line">                min_diff = diff;</span><br><span class="line">                closest_sum = sum;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 移动指针</span></span><br><span class="line">            <span class="keyword">if</span>(sum &gt; target) &#123;</span><br><span class="line">                --right;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ++left;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="comment">// end while</span></span><br><span class="line">        <span class="keyword">return</span> closest_sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;给定一个包括 n 个整数的数组 nums 和 一个目标值 target。找出 nums 中的两个整数，使得它们的和
      
    
    </summary>
    
    
      <category term="LeetCode" scheme="https://hackeryard.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>最长递增子序列的个数</title>
    <link href="https://hackeryard.github.io/2020/04/26/number-of-lis/"/>
    <id>https://hackeryard.github.io/2020/04/26/number-of-lis/</id>
    <published>2020-04-26T01:56:45.000Z</published>
    <updated>2020-04-26T02:04:06.701Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>给定一个未排序的整数数组，找到最长递增子序列的个数。</p><p>示例 1:</p><p>输入: [1,3,5,4,7]<br>输出: 2<br>解释: 有两个最长递增子序列，分别是 [1, 3, 4, 7] 和[1, 3, 5, 7]。</p><p>来源：<a href="https://leetcode-cn.com/problems/number-of-longest-increasing-subsequence" target="_blank" rel="noopener">LeetCode</a></p><h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><p>计算LIS的个数，LIS的解法在<a href="/2020/04/26/lis">这里</a>。因为最长递推子序列的个数是不同的，分两种情况：1.LIS[i]是最大的LIS，但以i结尾的LIS个数有多个，在遍历的过程中，逐渐把刚好等于最大长度-1的，都加和起来，作为LIS[i]的序列个数；2.不同结尾的LIS可能都是最大值，则需要把这些也加和，作为最终的结果。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findNumberOfLIS</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        <span class="keyword">if</span>(n &lt;= <span class="number">1</span>) <span class="keyword">return</span> n;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dp(n, <span class="number">1</span>);    <span class="comment">// 以j结尾的最大递增子序列的长度</span></span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; count(n, <span class="number">1</span>); <span class="comment">// 以j结尾的最大递增子序列的个数</span></span><br><span class="line">        <span class="keyword">int</span> max_len = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                <span class="comment">// 找到相同最大长度的加和起来</span></span><br><span class="line">                <span class="comment">// 这里如何判断最大长度？有更大的值赋值替换即可</span></span><br><span class="line">                <span class="keyword">if</span>(nums[j] &lt; nums[i]) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(dp[j] &gt;= dp[i]) &#123; <span class="comment">// 赋值更新 长度采用j的长度</span></span><br><span class="line">                        dp[i] = dp[j] + <span class="number">1</span>;</span><br><span class="line">                        count[i] = count[j];</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(dp[j] + <span class="number">1</span> == dp[i]) &#123; <span class="comment">// 当前长度下刚好相等</span></span><br><span class="line">                        count[i] += count[j];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            max_len = max(max_len, dp[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(max_len == dp[i]) &#123;</span><br><span class="line">                cnt += count[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;p&gt;给定一个未排序的整数数组，找到最长递增子序列的个数。&lt;/p&gt;
&lt;p&gt;示例 1:&lt;/p&gt;
&lt;p&gt;输入: [1,3,5,4,7]
      
    
    </summary>
    
    
      <category term="LeetCode" scheme="https://hackeryard.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>最长递增子序列</title>
    <link href="https://hackeryard.github.io/2020/04/26/lis/"/>
    <id>https://hackeryard.github.io/2020/04/26/lis/</id>
    <published>2020-04-26T00:33:10.000Z</published>
    <updated>2020-04-26T01:58:54.096Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个序列X=(X1,X2,…,Xm)，求X的最长递增子序列。（子序列可以是不连续的，比如{5,6,7,1,2,8}的LIS是5,6,7,8）</p><p>说明:<br>可能会有多种最长上升子序列的组合，你只需要输出对应的长度即可。<br>你算法的时间复杂度应该为 O(n2) 。<br>进阶: 你能将算法的时间复杂度降低到 O(nlogn) 吗?</p><p>来源：<a href="https://leetcode-cn.com/problems/longest-increasing-subsequence" target="_blank" rel="noopener">LeetCode</a></p><h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><p>因为是数组，求数组的最优解，问题太大了，我们能不能划分一下，分成多个子问题？这里子问题是需要跟问题对应的，即与递增子序列对应，我们把子问题划分为(X1…Xi)，LIS[i]是以Xi为结尾的最长递增子序列，最优子结构利用了递增的性质，即比较当前结尾元素和所有子问题结尾元素的大小，如果大，则在子问题解的基础上加1。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lengthOfLIS</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dp(n, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> max_len = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[j] &lt; nums[i]) &#123;</span><br><span class="line">                    dp[i] = max(dp[i], dp[j] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            max_len = max(max_len, dp[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max_len;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;给定一个序列X=(X1,X2,…,Xm)，求X的最长递增子序列。（子序列可以是不连续的，比如{5,6,7,1,2,8}的LI
      
    
    </summary>
    
    
      <category term="LeetCode" scheme="https://hackeryard.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>两个链表的第一个公共节点</title>
    <link href="https://hackeryard.github.io/2020/04/26/first-common-node-of-two-linked-list/"/>
    <id>https://hackeryard.github.io/2020/04/26/first-common-node-of-two-linked-list/</id>
    <published>2020-04-25T23:59:09.000Z</published>
    <updated>2020-04-26T00:24:58.404Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>输入两个链表，找出它们的第一个公共节点。</p><p>注意：<br>如果两个链表没有交点，返回null.<br>在返回结果后，两个链表仍须保持原有的结构。<br>可假定整个链表结构中没有循环。<br>程序尽量满足 O(n) 时间复杂度，且仅用 O(1) 内存。<br><img src="/images/getIntersectionNode.png" alt="公共节点"></p><p>来源：<a href="https://leetcode-cn.com/problems/liang-ge-lian-biao-de-di-yi-ge-gong-gong-jie-dian-lcof" target="_blank" rel="noopener">LeetCode</a></p><h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><p>用hashset可以很快解决问题，即先把链表1的所有节点指针放入set，遍历链表2时，如果找到有相等的指针，则说明这就是第一个公共节点，遍历结束还没找找到，说明没有相交节点。但这种方法的空间复杂度是O(n)，如何找到O(1)的方法呢？这里O(1)必然是使用双指针，分别遍历两个链表，但因为两个链表长度的问题，一次遍历肯定不行，第二次遍历如何继续？<br>因为相交必须是严格的数学推导出的，我们把节点a1…a2的长度记为a，把b1…b3的长度记为b，把公共c1…c3的长度记为c，要判断是否相交，则通过a+c+b=b+c+a这个等式判断，即在链表1第一次遍历结束后，马上从链表2的开始位置继续遍历，链表2同理。在遍历的过程中比较指针是否相等。如果两个链表没有相交，第二次遍历时，会同时指向最后的null，返回null即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">getIntersectionNode</span><span class="params">(ListNode *headA, ListNode *headB)</span> </span>&#123;</span><br><span class="line">        ListNode * p1 = headA;</span><br><span class="line">        ListNode * p2 = headB;</span><br><span class="line">        <span class="keyword">while</span>(p1 != p2) &#123;</span><br><span class="line">            p1 = p1 != <span class="literal">NULL</span> ? p1-&gt;next : headB;</span><br><span class="line">            p2 = p2 != <span class="literal">NULL</span> ? p2-&gt;next : headA;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;输入两个链表，找出它们的第一个公共节点。&lt;/p&gt;
&lt;p&gt;注意：&lt;br&gt;如果两个链表没有交点，返回null.&lt;br&gt;在返回结果
      
    
    </summary>
    
    
      <category term="LeetCode" scheme="https://hackeryard.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>最长公共子串（Longest Common Substring）</title>
    <link href="https://hackeryard.github.io/2020/04/25/Longest-Common-Substring/"/>
    <id>https://hackeryard.github.io/2020/04/25/Longest-Common-Substring/</id>
    <published>2020-04-25T12:46:45.000Z</published>
    <updated>2020-04-25T23:25:10.744Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><hr><p>给定两个序列X=(X1,X2,…,Xm)和Y=(Y1,Y2,…,Yn)，求X和Y的最长公共子串。<br>例如：输入两个字符串acbac和acaccbabb，则最大连续子串为cba, 则返回长度3。</p><h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><p>参考之前关于<a href="/2020/04/25/lcs">最长公共子序列LCS</a>的解法，我们发现LCS是一种通用的公共子序列，而子串是一种连续的子序列，所以需要修改递推公式。<strong>此处动态规划表格存放的内容有所不同</strong>，LCS是比较子串，当前问题是为了使用连续子串这一条件，所以考虑设数组dp[i,j]表示以Xi和Yj结尾的最大公共连续子串的长度，如果Xi=Yj，则dp[i,j]=dp[i-1,j-1]+1，只需要再考虑dp[i-1,j-1]这个子问题，如果不相等，则dp[i,j]=0，如果i=0或j=0，说明有一个字符串已经结束了，则dp[i,j]=0。需要注意的是，dp的含义决定了最后的输出结果不是dp[m,n]，而必须在计算dp的过程中寻找最大值。</p><p>递归+memo：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">longestCommonSubstring</span><span class="params">(<span class="built_in">string</span> text1, <span class="built_in">string</span> text2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> size1 = text1.size();</span><br><span class="line">        <span class="keyword">int</span> size2 = text2.size();</span><br><span class="line">        <span class="keyword">int</span> memo[<span class="number">1001</span>][<span class="number">1001</span>];</span><br><span class="line">        <span class="built_in">memset</span>(memo, <span class="number">0</span>, <span class="number">1001</span>*<span class="number">1001</span>*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">        <span class="keyword">int</span> max_len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> end_index;</span><br><span class="line">        lcs(text1, text2, memo, size1<span class="number">-1</span>, size2<span class="number">-1</span>, max_len, end_index);</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;text1.substr(end_index-max_len+<span class="number">1</span>, max_len);</span><br><span class="line">        <span class="keyword">return</span> max_len;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lcs</span><span class="params">(<span class="built_in">string</span> &amp; a, <span class="built_in">string</span> &amp; b, <span class="keyword">int</span> memo[][<span class="number">1001</span>], <span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> &amp; max_len, <span class="keyword">int</span> &amp; end_index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">-1</span> || j == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 有一个字符串已经结束</span></span><br><span class="line">        <span class="keyword">if</span>(memo[i][j] != <span class="number">-1</span>) <span class="keyword">return</span> memo[i][j];</span><br><span class="line">        <span class="keyword">if</span>(a[i] == b[j]) &#123;</span><br><span class="line">            memo[i][j] = lcs(a, b, memo, i<span class="number">-1</span>, j<span class="number">-1</span>, max_len, end_index) + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            memo[i][j] = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// 此处这么做为了使lcs继续推进 不然遇到零就停下来了</span></span><br><span class="line">            lcs(a, b, memo, i, j<span class="number">-1</span>, max_len, end_index);</span><br><span class="line">            lcs(a, b, memo, i<span class="number">-1</span>, j, max_len, end_index);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(memo[i][j] &gt; max_len) &#123;</span><br><span class="line">            max_len = memo[i][j];</span><br><span class="line">            end_index = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> memo[i][j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h2><hr><p>自底向上的解法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">longestCommonSubstring</span><span class="params">(<span class="built_in">string</span> text1, <span class="built_in">string</span> text2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> dp[<span class="number">1001</span>][<span class="number">1001</span>];</span><br><span class="line">        <span class="comment">// memset更高效 memset针对cpu指令集做了优化</span></span><br><span class="line">        <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="number">1001</span>*<span class="number">1001</span>*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">        <span class="keyword">int</span> size1 = text1.size();</span><br><span class="line">        <span class="keyword">int</span> size2 = text2.size();</span><br><span class="line">        <span class="keyword">int</span> max_len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> end_index;</span><br><span class="line">        <span class="comment">// 从1开始 是为了把c[0,j]和c[i,0]留给空字符串用</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= size1; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= size2; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(text1[i<span class="number">-1</span>] == text2[j<span class="number">-1</span>]) &#123;</span><br><span class="line">                    dp[i][j] = dp[i<span class="number">-1</span>][j<span class="number">-1</span>] + <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    dp[i][j] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 保存最大长度</span></span><br><span class="line">                <span class="keyword">if</span>(dp[i][j] &gt; max_len) &#123;</span><br><span class="line">                    max_len = dp[i][j];</span><br><span class="line">                    end_index = i<span class="number">-1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;text1.substr(end_index-max_len+<span class="number">1</span>, max_len);</span><br><span class="line">        <span class="keyword">return</span> max_len;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;给定两个序列X=(X1,X2,…,Xm)和Y=(Y1,Y2,…,Yn)，求X和Y的最长公共子串。&lt;br&gt;例如：输入
      
    
    </summary>
    
    
      <category term="LeetCode" scheme="https://hackeryard.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>翻转二叉树</title>
    <link href="https://hackeryard.github.io/2020/04/25/invert-tree/"/>
    <id>https://hackeryard.github.io/2020/04/25/invert-tree/</id>
    <published>2020-04-25T08:19:57.000Z</published>
    <updated>2020-04-25T14:16:47.256Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>翻转一棵二叉树。</p><p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line"></span><br><span class="line">     4</span><br><span class="line">   /   \</span><br><span class="line">  2     7</span><br><span class="line"> / \   / \</span><br><span class="line">1   3 6   9</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"></span><br><span class="line">     4</span><br><span class="line">   /   \</span><br><span class="line">  7     2</span><br><span class="line"> / \   / \</span><br><span class="line">9   6 3   1</span><br></pre></td></tr></table></figure></p><p>来源：<a href="https://leetcode-cn.com/problems/invert-binary-tree" target="_blank" rel="noopener">LeetCode</a></p><h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><p>从根节点的左右子树开始，互换两个节点的指针，完成根节点的翻转，再递归地翻转左右子树节点的左右节点。递归出口是到达树的底部。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">invertTree</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        TreeNode * temp = root-&gt;left;</span><br><span class="line">        root-&gt;left = root-&gt;right;</span><br><span class="line">        root-&gt;right = temp;</span><br><span class="line">        invertTree(root-&gt;right);</span><br><span class="line">        invertTree(root-&gt;left);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h2><p>二叉树BFS，对遍历到的每一个节点，都对其左右节点进行翻转。<br>注意：此时push到队列的元素都非空，因为只有非空才会有对子节点翻转的必要。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">invertTree</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="built_in">queue</span>&lt;TreeNode*&gt; q;</span><br><span class="line">        q.push(root);</span><br><span class="line">        <span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">            TreeNode * node = q.front();</span><br><span class="line">            q.pop();</span><br><span class="line">            TreeNode * temp = node-&gt;left;</span><br><span class="line">            node-&gt;left = node-&gt;right;</span><br><span class="line">            node-&gt;right = temp;</span><br><span class="line">            <span class="keyword">if</span>(node-&gt;left) q.push(node-&gt;left);</span><br><span class="line">            <span class="keyword">if</span>(node-&gt;right) q.push(node-&gt;right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;翻转一棵二叉树。&lt;/p&gt;
&lt;p&gt;示例：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;
      
    
    </summary>
    
    
      <category term="LeetCode" scheme="https://hackeryard.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>最长公共子序列</title>
    <link href="https://hackeryard.github.io/2020/04/25/lcs/"/>
    <id>https://hackeryard.github.io/2020/04/25/lcs/</id>
    <published>2020-04-25T06:51:49.000Z</published>
    <updated>2020-04-25T23:23:08.420Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><hr><p>给定两个字符串 text1 和 text2，返回这两个字符串的最长公共子序列的长度。</p><p>一个字符串的 子序列 是指这样一个新的字符串：它是由原字符串在不改变字符的相对顺序的情况下删除某些字符（也可以不删除任何字符）后组成的新字符串。</p><p>示例 1:<br>输入：text1 = “abcde”, text2 = “ace”<br>输出：3<br>解释：最长公共子序列是 “ace”，它的长度为 3</p><p>提示:<br>1 &lt;= text1.length &lt;= 1000<br>1 &lt;= text2.length &lt;= 1000<br>输入的字符串只含有小写英文字符。</p><p>来源：<a href="https://leetcode-cn.com/problems/longest-common-subsequence" target="_blank" rel="noopener">LeetCode</a></p><h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><hr><p>动态规划思想的本质是动态表格(dynamic table)，使用动态规划必须满足两个条件：1.重复子问题，2.最优子结构，表格的思想是以空间换时间，把求解的所有子问题的解都保存下来，不用重复计算，最优子结构则保证了，原问题的解由子问题的组合构成，就可以写成递推公式，在较短的时间复杂度内求解。<br>针对LCS问题，把字符串a表示为(X1,X2,…,Xm)，字符串b表示为(Y1,Y2,…,Yn)，我们先看看能不能划分子问题：求a和b的LCS，可以定义为LCS[i,j]，其中i表示从X1到Xi的子串，j表示从Y1到Yj的子串，这里固定了字符串的起始索引1。为什么这么划分子问题？因为如果起始索引和结束索引都动态的话，那就更难解决了，更重要的是，我们求最长公共子序列，起始索引动态是没有意义的，因为起始索引大于1的子问题，其结果总会小于等于索引为1的子问题结果。<br>问题形式化之后，我们发现，如果Xi=Yj，则LCS[i,j]=LCS[i-1,j-1]+1，只需要再考虑LCS[i-1,j-1]这个子问题，如果不相等，则有两个子问题需要解决，LCS[i,j]=max(LCS[i,j-1], LCS[i-1,j])，如果i=0或j=0，说明有一个字符串已经结束了，则LCS[i,j]=0</p><p>解决递推公式问题，有两种方法，一种是自底向上，从求解小问题开始，逐渐求解整个问题，另一种是递归的方式，因为中途有很多重复子问题（如LCS[i-1,j-1]可能是LCS[i,j]的子问题，也可能LCS[i,j-1]的子问题），所以使用memo数组记录下这些子问题的解。</p><p>以下是递归+memo的解法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">longestCommonSubsequence</span><span class="params">(<span class="built_in">string</span> text1, <span class="built_in">string</span> text2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> size1 = text1.size();</span><br><span class="line">        <span class="keyword">int</span> size2 = text2.size();</span><br><span class="line">        <span class="keyword">int</span> memo[<span class="number">1001</span>][<span class="number">1001</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1001</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">1001</span>; j++) &#123;</span><br><span class="line">                memo[i][j] = <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lcs(text1, text2, memo, size1<span class="number">-1</span>, size2<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lcs</span><span class="params">(<span class="built_in">string</span> &amp; a, <span class="built_in">string</span> &amp; b, <span class="keyword">int</span> memo[][<span class="number">1001</span>], <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">-1</span> || j == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 有一个字符串已经结束</span></span><br><span class="line">        <span class="keyword">if</span>(memo[i][j] != <span class="number">-1</span>) <span class="keyword">return</span> memo[i][j];</span><br><span class="line">        <span class="keyword">if</span>(a[i] == b[j]) &#123;</span><br><span class="line">            memo[i][j] = lcs(a, b, memo, i<span class="number">-1</span>, j<span class="number">-1</span>) + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> memo[i][j];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            memo[i][j] = max(lcs(a, b, memo, i<span class="number">-1</span>, j), lcs(a, b, memo, i, j<span class="number">-1</span>));</span><br><span class="line">            <span class="keyword">return</span> memo[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h2><hr><p>自底向上的解法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">longestCommonSubsequence</span><span class="params">(<span class="built_in">string</span> text1, <span class="built_in">string</span> text2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> dp[<span class="number">1001</span>][<span class="number">1001</span>];</span><br><span class="line">        <span class="comment">// 对于dp数组的初始化</span></span><br><span class="line">        <span class="comment">// memset更高效 memset针对cpu指令集做了优化</span></span><br><span class="line">        <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="number">1001</span>*<span class="number">1001</span>*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">        <span class="keyword">int</span> size1 = text1.size();</span><br><span class="line">        <span class="keyword">int</span> size2 = text2.size();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= size1; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= size2; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(text1[i<span class="number">-1</span>] == text2[j<span class="number">-1</span>]) &#123;</span><br><span class="line">                    dp[i][j] = dp[i<span class="number">-1</span>][j<span class="number">-1</span>] + <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    dp[i][j] = max(dp[i][j<span class="number">-1</span>], dp[i<span class="number">-1</span>][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[size1][size2];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;给定两个字符串 text1 和 text2，返回这两个字符串的最长公共子序列的长度。&lt;/p&gt;
&lt;p&gt;一个字符串的 
      
    
    </summary>
    
    
      <category term="LeetCode" scheme="https://hackeryard.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>对称二叉树</title>
    <link href="https://hackeryard.github.io/2020/04/25/symmetric-tree/"/>
    <id>https://hackeryard.github.io/2020/04/25/symmetric-tree/</id>
    <published>2020-04-25T05:38:01.000Z</published>
    <updated>2020-04-25T08:34:44.200Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><hr><p>给定一个二叉树，检查它是否是镜像对称的。</p><p>例如，二叉树 [1,2,2,3,4,4,3] 是对称的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    1</span><br><span class="line">   / \</span><br><span class="line">  2   2</span><br><span class="line"> / \ / \</span><br><span class="line">3  4 4  3</span><br></pre></td></tr></table></figure></p><p>来源：<a href="https://leetcode-cn.com/problems/symmetric-tree" target="_blank" rel="noopener">LeetCode</a></p><h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><hr><p>给定一个根节点，如何判断左右子树对称，设计一个递归函数，传递左右子树的根节点到递归函数，返回值是这两颗子树是否相等。在函数里，每次只比较两个子树的根节点是否相等，剩下的交给函数递归求解。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isSymmetric</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> helper(root-&gt;left, root-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">helper</span><span class="params">(TreeNode * left, TreeNode * right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!left &amp;&amp; !right) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(!left || !right) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(left-&gt;val != right-&gt;val) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> helper(left-&gt;left, right-&gt;right) &amp;&amp; helper(left-&gt;right, right-&gt;left);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h2><hr><p>既然对称的树，每一层都是符合对称的规则，那么能不能按照逐层判断的方式，层次遍历，每一层判断过程中，如果检测到不对称，则立即返回，如果最后遍历完，仍然没有不对称的，则说明树是对称的。<br>注意：此处push到队列的后续节点，可以是null，null是参与比较是否对称的。而一般的二叉树层次遍历只输出非null的节点。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isSymmetric</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="built_in">queue</span>&lt;TreeNode*&gt; q;</span><br><span class="line">        q.push(root-&gt;left);</span><br><span class="line">        q.push(root-&gt;right);</span><br><span class="line">        <span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">            <span class="comment">// 每次取对称位置的两个节点判断</span></span><br><span class="line">            TreeNode *node1 = q.front();</span><br><span class="line">            q.pop();</span><br><span class="line">            TreeNode *node2 = q.front();</span><br><span class="line">            q.pop();</span><br><span class="line">            <span class="comment">// 继续判断别的对称位置的节点</span></span><br><span class="line">            <span class="keyword">if</span>(!node1 &amp;&amp; !node2) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(!node1 || !node2) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span>(node1-&gt;val != node2-&gt;val) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            q.push(node1-&gt;left);</span><br><span class="line">            q.push(node2-&gt;right);</span><br><span class="line">            q.push(node1-&gt;right);</span><br><span class="line">            q.push(node2-&gt;left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;给定一个二叉树，检查它是否是镜像对称的。&lt;/p&gt;
&lt;p&gt;例如，二叉树 [1,2,2,3,4,4,3] 是对称的。&lt;
      
    
    </summary>
    
    
      <category term="LeetCode" scheme="https://hackeryard.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>反转链表</title>
    <link href="https://hackeryard.github.io/2020/04/20/reverse-list/"/>
    <id>https://hackeryard.github.io/2020/04/20/reverse-list/</id>
    <published>2020-04-20T07:25:48.000Z</published>
    <updated>2020-04-25T05:41:24.099Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><hr><p>反转一个单链表。</p><p>示例:<br>输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL<br>输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL<br>进阶:<br>你可以迭代或递归地反转链表。你能否用两种方法解决这道题？</p><p>来源：<a href="https://leetcode-cn.com/problems/reverse-linked-list" target="_blank" rel="noopener">LeetCode</a></p><h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><hr><p>从前往后，每次反转后一个节点，维持两个指针prev和last，分别指向第一个和第二个节点，依次后移，直到链表结束同时因为last反转后，下一个节点的连接丢失，所以必须维持一个临时指针，保存last的下一个节点。结束时，置head节点为NULL。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">nullptr</span> || head-&gt;next == <span class="literal">nullptr</span>) <span class="keyword">return</span> head;</span><br><span class="line">        ListNode * prev = head;</span><br><span class="line">        ListNode * last = head-&gt;next;</span><br><span class="line">        <span class="keyword">while</span>(last) &#123;</span><br><span class="line">            ListNode * temp = last-&gt;next;</span><br><span class="line">            last-&gt;next = prev;</span><br><span class="line">            prev = last;</span><br><span class="line">            last = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        head-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h2><hr><p>反转链表有点像栈，最简单的思路是节点指针存放在栈中，出栈时依次指向下一个在栈顶中的元素。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">nullptr</span>) <span class="keyword">return</span> head;</span><br><span class="line">        <span class="built_in">stack</span>&lt;ListNode*&gt; s;</span><br><span class="line">        <span class="keyword">while</span>(head) &#123;</span><br><span class="line">            s.push(head);</span><br><span class="line">            head = head-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode * cur; <span class="comment">// 工作指针</span></span><br><span class="line">        ListNode * newhead = s.top(); <span class="comment">// 最开始的位置</span></span><br><span class="line">        <span class="keyword">while</span>(!s.empty()) &#123;</span><br><span class="line">            cur = s.top();</span><br><span class="line">            s.pop();</span><br><span class="line">            cur-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">            <span class="keyword">if</span>(!s.empty()) &#123;</span><br><span class="line">                cur-&gt;next = s.top();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newhead;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="解法三"><a href="#解法三" class="headerlink" title="解法三"></a>解法三</h2><hr><p>与栈的解法类似，可以用递归的方式模拟栈。递归首先要找出能递归的子问题，子问题的结构在递归时需要保持一致，每次递归都完成一点工作，最后递归过程结束时，就得到了问题的解。<br>反转链表中，首先依次递归到底部，找到结尾节点作为返回值，之后因为从倒数第二个节点开始，用p-&gt;next-&gt;next=p的方式完成后一个节点到当前节点的反转，递归结束退回到head。注意每次递归下一个节点返回，都把它的next置位nullptr，这是为了最后不用单独置head-&gt;next=nullptr，保持递归的结构。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">nullptr</span> || head-&gt;next == <span class="literal">nullptr</span>) <span class="keyword">return</span> head;</span><br><span class="line">        ListNode * newhead = reverseList(head-&gt;next);</span><br><span class="line">        head-&gt;next-&gt;next = head;</span><br><span class="line">        head-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">return</span> newhead;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;反转一个单链表。&lt;/p&gt;
&lt;p&gt;示例:&lt;br&gt;输入: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5-&amp;gt;
      
    
    </summary>
    
    
      <category term="LeetCode" scheme="https://hackeryard.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>常用工具集</title>
    <link href="https://hackeryard.github.io/2018/03/21/tool-set/"/>
    <id>https://hackeryard.github.io/2018/03/21/tool-set/</id>
    <published>2018-03-21T13:31:30.000Z</published>
    <updated>2018-03-23T03:51:26.707Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vim快捷键："><a href="#Vim快捷键：" class="headerlink" title="Vim快捷键："></a>Vim快捷键：</h2><ul><li>跳到第一行  :1 或 gg</li><li>跳到最后一行  :$ 或 Shift+g</li><li>复制  yy</li><li>删除  dd </li><li>撤销  U </li><li>粘贴  P </li></ul><h2 id="加载Python自带Web-Server："><a href="#加载Python自带Web-Server：" class="headerlink" title="加载Python自带Web Server："></a>加载Python自带Web Server：</h2><ul><li>python -m SimpleHTTPServer 80</li><li>python3 -m http.server 80</li></ul><h2 id="Webstorm快捷键"><a href="#Webstorm快捷键" class="headerlink" title="Webstorm快捷键"></a>Webstorm快捷键</h2><ul><li>Ctrl + Alt + L 格式化代码</li><li>双击shift 全局查找</li><li>快速代码补全 emmet </li><li>快速生成框架 !html</li></ul><h2 id="Onenote使用笔记"><a href="#Onenote使用笔记" class="headerlink" title="Onenote使用笔记"></a>Onenote使用笔记</h2><ul><li>截图：Win+shift+S</li></ul><h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><ul><li>重新加载配置：nginx -s reload</li><li>快速关闭：nginx -s stop</li><li>安全关闭：nginx -s quit</li></ul><h2 id="FFmpeg"><a href="#FFmpeg" class="headerlink" title="FFmpeg"></a>FFmpeg</h2><h2 id="celery-4-in-Windows"><a href="#celery-4-in-Windows" class="headerlink" title="celery 4 in Windows"></a>celery 4 in Windows</h2><ul><li>不支持pool：celery -A your_app_name worker –pool=solo -l info</li></ul><h2 id="lsof：list-open-files"><a href="#lsof：list-open-files" class="headerlink" title="lsof：list open files"></a>lsof：list open files</h2><p>查看进程打开的文件列表</p><ul><li>lsof -c -p pid</li><li>lsof -c program</li></ul><h2 id="获取当前缓存（加载）的动态链接库："><a href="#获取当前缓存（加载）的动态链接库：" class="headerlink" title="获取当前缓存（加载）的动态链接库："></a>获取当前缓存（加载）的动态链接库：</h2><ul><li>ldconfig -p | grep libssh</li></ul><h2 id="查看可执行文件所依赖的库："><a href="#查看可执行文件所依赖的库：" class="headerlink" title="查看可执行文件所依赖的库："></a>查看可执行文件所依赖的库：</h2><ul><li>ldd 绝对路径</li><li>（程序的某个section中会记录动态链接的信息）</li></ul><h2 id="aliases"><a href="#aliases" class="headerlink" title="aliases"></a>aliases</h2><ul><li>alias de=’ps -ef |grep’</li><li>alias c=’clear’</li><li>alias ncat=’netstat -nlp |grep’</li><li>alias listp=’pkg-config –list-all |grep’</li><li>alias versionp=’pkg-config –modversion’</li><li>alias finf=’find / -name’</li><li>alias s=’apt-cache search’</li></ul><h2 id="高亮日志分析工具（log-navigator）："><a href="#高亮日志分析工具（log-navigator）：" class="headerlink" title="高亮日志分析工具（log navigator）："></a>高亮日志分析工具（log navigator）：</h2><ul><li>apt-get install lnav</li></ul><h2 id="ovs"><a href="#ovs" class="headerlink" title="ovs"></a>ovs</h2><ul><li><p>运维：</p><ul><li>运维脚本位置<ul><li>/usr/share/openvswitch/scripts</li><li>/usr/local/share/openvswitch/scripts</li></ul></li><li>启动：ovs-ctl start</li><li>重启：ovs-ctl restart</li><li>状态：ovs-ctl status</li></ul></li><li><p>查看日志：</p><ul><li>ovsdb-tool show-log</li></ul></li><li><p>查看ovsdb里面的数据表：</p><ul><li>ovsdb-client list-tables</li></ul></li><li><p>查看ovsdb中的相关字段定义</p><ul><li>ovsdb-client list-columns Interface | grep ofport</li></ul></li><li><p>查看ovsdb中的相关数据：</p><ul><li>ovs-vsctl  – –columns=external_ids,name,ofport,ofport_request  list Interface</li></ul></li><li><p>alias:</p><ul><li>alias ovss=’ovs-vsctl show’</li><li>alias apps=’ovs-appctl fdb/show’</li><li>alias ofs=’ovs-ofctl show ofc-bridge’</li></ul></li></ul><h2 id="编译相关"><a href="#编译相关" class="headerlink" title="编译相关"></a>编译相关</h2><ul><li><p>cmake：</p><ul><li>一个跨平台编译工具 用于生成适配平台的Makefile</li><li>mkdir build</li><li>cd build</li><li>cmake ..</li><li>make &amp;&amp; make install</li><li>重新cmake之前需要删除CMakeCache.txt</li></ul></li><li><p>pkg-config:</p><ul><li>编译库的时候 使用这个工具管理其依赖</li><li>即记录头文件和库文件的存放位置 用于编译和链接</li><li>pkg-config –list-all | grep libnetconf</li><li>pkg-config  –modversion libnetconf</li></ul></li></ul><h2 id="IPv6-DNS"><a href="#IPv6-DNS" class="headerlink" title="IPv6 DNS:"></a>IPv6 DNS:</h2><ul><li>国内公共DNS（延迟2ms）：<ul><li>240c::6666</li><li>240c::6644</li></ul></li><li>he.net(US延迟156ms）：<ul><li>2001:470:20::2</li><li>2001:470:0:9d::2</li></ul></li><li>Google（延迟156ms）：<ul><li>2001:4860:4860::8888</li><li>2001:4860:4860::8844</li></ul></li></ul><h2 id="屏蔽广告："><a href="#屏蔽广告：" class="headerlink" title="屏蔽广告："></a>屏蔽广告：</h2><ul><li>hosts方式：<ul><li>0.0.0.0 xian.qq.com</li><li>0.0.0.0 q.i.gdt.qq.com</li><li>0.0.0.0 v.gdt.qq.com</li><li>0.0.0.0 c.gdt.qq.com</li><li>…</li></ul></li><li>插件方式：<ul><li>adblock</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Vim快捷键：&quot;&gt;&lt;a href=&quot;#Vim快捷键：&quot; class=&quot;headerlink&quot; title=&quot;Vim快捷键：&quot;&gt;&lt;/a&gt;Vim快捷键：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;跳到第一行  :1 或 gg&lt;/li&gt;
&lt;li&gt;跳到最后一行  :$ 或 Shift+g
      
    
    </summary>
    
      <category term="工具" scheme="https://hackeryard.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具 备忘" scheme="https://hackeryard.github.io/tags/%E5%B7%A5%E5%85%B7-%E5%A4%87%E5%BF%98/"/>
    
  </entry>
  
  <entry>
    <title>hexo博客之旅 [3]: 添加gitment评论和链接分享功能</title>
    <link href="https://hackeryard.github.io/2018/02/03/the-journal-of-hexo-blog-3/"/>
    <id>https://hackeryard.github.io/2018/02/03/the-journal-of-hexo-blog-3/</id>
    <published>2018-02-03T05:42:44.000Z</published>
    <updated>2020-04-25T01:16:30.227Z</updated>
    
    <content type="html"><![CDATA[<p>一个博客如果没有评论和分享功能，势必是单点的，你只是单向的发布信息，读者无法评论和快速分享，这对博主和读者都是巨大的损失。</p><h2 id="添加评论系统"><a href="#添加评论系统" class="headerlink" title="添加评论系统"></a>添加评论系统</h2><p><a href="https://github.com/imsun/gitment/" target="_blank" rel="noopener">gitment</a>是一个基于github issue给博客添加评论的系统，原理大概是通过博客作者在某个repo创建带有某个label的issue，来为某篇博客对应评论，由于github的在线编辑器支持markdown预览，还是很优雅的，而且这样做也不用为hexo这样的静态博客添加动态代码来存取评论。</p><p>一篇博客对应一个issue，只有博主经过授权后，才可以初始化issue，这样后续的读者就可以用自己的github账号登录博主的gitment应用，来向这篇博客添加评论，里面的对文章的点赞和对其他用户的点赞，其实跟issue主页的点击操作一样，都是通过api操作的。</p><p>这么说来，gitment只是一个基于issue的评论前台，用于存取issue里面的评论数据。</p><p>部署的时候，我参考了<a href="https://blog.fundebug.com/2017/06/16/how-to-use-gitment/" target="_blank" rel="noopener">这篇文章</a>，并且遇到了一个问题，登录自家博客之后，文章底部出现了gitment的框架，由于没有初始化issue，点击初始化按钮后，提示<a href="https://github.com/imsun/gitment/issues/114" target="_blank" rel="noopener">Validation Failed</a>，</p><p>一番搜索后，发现是github issue中的label长度有限制，不能超过50字节。</p><p><img src="/images/label-limit.png" alt="label长度 &lt;= 50字节"></p><p>查看js代码后，发现id是<em>window.location.href</em>，这样长度会经常超出。由于我之前文章的url都是英文的，所以使用url中的英文标题作为id，后续需要整理一番英文title，以正常初始化issue:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mod_id = <span class="built_in">window</span>.location.href.split(<span class="string">"/"</span>);</span><br><span class="line">mod_id = mod_id[mod_id.length - <span class="number">2</span>];</span><br><span class="line"><span class="built_in">Object</span>.assign(<span class="keyword">this</span>, &#123;</span><br><span class="line">  id: mod_id,</span><br><span class="line">  title: <span class="built_in">window</span>.document.title,</span><br><span class="line">  link: <span class="built_in">window</span>.location.href</span><br></pre></td></tr></table></figure><p>gitment评论系统很优雅，虽然有时候github的国内访问速度超慢，但github的数据很稳定，不会像多说一样为数据丢失担忧。</p><p>在使用过程中，发现gitment对于新文章的初始化需要博主自己点击，这对像我这样从其他博客迁移过来的用户而言，重复几十次的点击就不是那么有意思了。</p><p>为此，我写了一个自动化脚本，工作流程如下：</p><ol><li>由于新开的chrome不包含github已登录session和cookie，所以需要模拟登录github账号</li><li>获取站点sitemap.xml，如(<a href="https://hackeryard.github.io/sitemap.xml)，解析成文章的url">https://hackeryard.github.io/sitemap.xml)，解析成文章的url</a></li><li>依次模拟打开上述url，初次打开需要login，之后的文章则不再需要</li><li>对每篇文章模拟点击init button，如果点击出错，表示已被初始化；如果成功，表示正在初始化，sleep 5s后打开下一个url</li></ol><p>脚本在<a href="https://github.com/hackeryard/hexo-plugins/blob/master/init-gitment.py" target="_blank" rel="noopener">这里</a>，欢迎使用！</p><h2 id="替换分享链接到国内社交站点"><a href="#替换分享链接到国内社交站点" class="headerlink" title="替换分享链接到国内社交站点"></a>替换分享链接到国内社交站点</h2><p>话说hexo是一个台湾开发者写的，文章的默认分享都是分享到国外的社交平台，如Twitter/Facebook/G+等，能上这些网站的用户固然是少数，所以把分享功能本地化是很有必要的。</p><p>首先,我参考了<a href="https://blanboom.org/2015/hack-hexo-theme-landscape/" target="_blank" rel="noopener">这篇文章</a>，由于我是用的hexo，其landscape主题里面的fonts是4.0.3版本的fontawesome，导致qq和腾讯微博的图标无法显示，按照文中的方法折腾了最新版的5.0.6版本，找到webfont子目录，替换了hexo中的fonts下的文件，发现这次原有图标失效，新添加了四个分享按钮却是正常的，我以为是缓存的问题，又去看了Edge浏览器，还有手机Brave/Chrome浏览器，仍然不行，正打算撤回老版本的时候，发现fontawesome的4和5版本差别很大(的确，想想python2/3，主版本间的差别可能很大)，这可能就是不兼容的原因。</p><p>没在fontawesome官网上找到老版本的存档，搜了半天，找到一个<a href="http://fontawesome.dashgame.com/" target="_blank" rel="noopener">4.7版本的站点</a>，下载后解压，然后更新版本号即可。</p><h2 id="其他参考"><a href="#其他参考" class="headerlink" title="其他参考"></a>其他参考</h2><p><a href="http://www.codertian.com/2016/03/14/change-landscape-theme-by-yourself/" target="_blank" rel="noopener">【实用技能】教你定制Hexo的landscape打造自己的主题</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一个博客如果没有评论和分享功能，势必是单点的，你只是单向的发布信息，读者无法评论和快速分享，这对博主和读者都是巨大的损失。&lt;/p&gt;
&lt;h2 id=&quot;添加评论系统&quot;&gt;&lt;a href=&quot;#添加评论系统&quot; class=&quot;headerlink&quot; title=&quot;添加评论系统&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="博客" scheme="https://hackeryard.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="hexo" scheme="https://hackeryard.github.io/tags/hexo/"/>
    
      <category term="blog" scheme="https://hackeryard.github.io/tags/blog/"/>
    
      <category term="gitment" scheme="https://hackeryard.github.io/tags/gitment/"/>
    
      <category term="github" scheme="https://hackeryard.github.io/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>hexo博客之旅 [2]: 利用webhooks自动部署hexo博客</title>
    <link href="https://hackeryard.github.io/2018/01/29/the-journal-of-hexo-blog-2/"/>
    <id>https://hackeryard.github.io/2018/01/29/the-journal-of-hexo-blog-2/</id>
    <published>2018-01-29T05:42:44.000Z</published>
    <updated>2020-04-20T04:02:16.614Z</updated>
    
    <content type="html"><![CDATA[<p>以前觉得hook是个深奥的技术，的确，到现在我还没写过一个hook，网上有很多文章讲hook都是用的win32 API，不知何时我竟然看不下去这种代码了，不知是喜是忧。</p><p>从<a href="https://developer.github.com/webhooks/" target="_blank" rel="noopener">Github给出的解释</a>搬运一段如下：</p><blockquote><p>Webhooks allow you to build or set up GitHub Apps which subscribe to certain events on GitHub.com. When one of those events is triggered, we’ll send a HTTP POST payload to the webhook’s configured URL. Webhooks can be used to update an external issue tracker, trigger CI builds, update a backup mirror, or even deploy to your production server. You’re only limited by your imagination.</p></blockquote><p>webhooks就是这样一种机制，当你的repo有某个特定的事件发生时，比如push/PR/issue/fork等，github在后台会向你填写的URL发送一个POST请求，里面包含了很多信息，比如issue会有sender和相应的repo，还有issue的地址等。</p><p>另外这段话里面也说明了<em>update a backup mirror</em>这个用法，vps上面的镜像博客给百度索引，github.io给谷歌索引。</p><p>根据webhooks的用法，我们在github pages的repo里面订阅对push事件的钩子，vps后台开启一个简单的web server监听此请求，然后使用git pull更新github pages里面的静态博客文件到本地。</p><p><img src="/images/webhooks.png" alt="设置Webhooks"></p><p>之前参考的一篇博客已经记不起来了，只记得是用node写的，我用python重写了一下，见<a href="https://github.com/hackeryard/hexo-plugins/blob/master/webhook.py" target="_blank" rel="noopener">github</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;以前觉得hook是个深奥的技术，的确，到现在我还没写过一个hook，网上有很多文章讲hook都是用的win32 API，不知何时我竟然看不下去这种代码了，不知是喜是忧。&lt;/p&gt;
&lt;p&gt;从&lt;a href=&quot;https://developer.github.com/webhoo
      
    
    </summary>
    
      <category term="博客" scheme="https://hackeryard.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="hexo" scheme="https://hackeryard.github.io/tags/hexo/"/>
    
      <category term="blog" scheme="https://hackeryard.github.io/tags/blog/"/>
    
      <category term="webhooks" scheme="https://hackeryard.github.io/tags/webhooks/"/>
    
      <category term="部署" scheme="https://hackeryard.github.io/tags/%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
</feed>
