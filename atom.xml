<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Spark Era Coming...</title>
  
  <subtitle>分享技术 记录生活</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://hackeryard.github.io/"/>
  <updated>2020-04-25T04:50:46.872Z</updated>
  <id>https://hackeryard.github.io/</id>
  
  <author>
    <name>Runking Hanna</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>反转链表</title>
    <link href="https://hackeryard.github.io/2020/04/20/reverse-list/"/>
    <id>https://hackeryard.github.io/2020/04/20/reverse-list/</id>
    <published>2020-04-20T07:25:48.000Z</published>
    <updated>2020-04-25T04:50:46.872Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><hr><p>反转一个单链表。</p><p>示例:<br>输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL<br>输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL<br>进阶:<br>你可以迭代或递归地反转链表。你能否用两种方法解决这道题？</p><p>来源：<a href="https://leetcode-cn.com/problems/reverse-linked-list" target="_blank" rel="noopener">LeetCode</a></p><h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><hr><p>从前往后，每次反转后一个节点，维持两个指针prev和last，分别指向第一个和第二个节点，依次后移，直到链表结束同时因为last反转后，下一个节点的连接丢失，所以必须维持一个临时指针，保存last的下一个节点。结束时，置head节点为NULL。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">nullptr</span> || head-&gt;next == <span class="literal">nullptr</span>) <span class="keyword">return</span> head;</span><br><span class="line">        ListNode * prev = head;</span><br><span class="line">        ListNode * last = head-&gt;next;</span><br><span class="line">        <span class="keyword">while</span>(last) &#123;</span><br><span class="line">            ListNode * temp = last-&gt;next;</span><br><span class="line">            last-&gt;next = prev;</span><br><span class="line">            prev = last;</span><br><span class="line">            last = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        head-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h2><hr><p>反转链表有点像栈，最简单的思路是节点指针存放在栈中，出栈时依次指向下一个在栈顶中的元素。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">nullptr</span>) <span class="keyword">return</span> head;</span><br><span class="line">        <span class="built_in">stack</span>&lt;ListNode*&gt; s;</span><br><span class="line">        <span class="keyword">while</span>(head) &#123;</span><br><span class="line">            s.push(head);</span><br><span class="line">            head = head-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode * cur; <span class="comment">// 工作指针</span></span><br><span class="line">        ListNode * newhead = s.top(); <span class="comment">// 最开始的位置</span></span><br><span class="line">        <span class="keyword">while</span>(!s.empty()) &#123;</span><br><span class="line">            cur = s.top();</span><br><span class="line">            s.pop();</span><br><span class="line">            cur-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">            <span class="keyword">if</span>(!s.empty()) &#123;</span><br><span class="line">                cur-&gt;next = s.top();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newhead;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="解法三"><a href="#解法三" class="headerlink" title="解法三"></a>解法三</h2><hr><p>与栈的解法类似，可以用递归的方式模拟栈。递归首先要找出能递归的子问题，子问题的结构在递归时需要保持一致，每次递归都完成一点工作，最后递归过程结束时，就得到了问题的解。<br>反转链表中，首先依次递归到底部，找到结尾节点作为返回值，之后因为从倒数第二个节点开始，用p-&gt;next-&gt;next=p的方式完成后一个节点到当前节点的反转，递归结束退回到head。注意每次递归下一个节点返回，都把它的next置位nullptr，这是为了最后不用单独置head-&gt;next=nullptr，保持递归的结构。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">nullptr</span> || head-&gt;next == <span class="literal">nullptr</span>) <span class="keyword">return</span> head;</span><br><span class="line">        ListNode * newhead = reverseList(head-&gt;next);</span><br><span class="line">        head-&gt;next-&gt;next = head;</span><br><span class="line">        head-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">return</span> newhead;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;反转一个单链表。&lt;/p&gt;
&lt;p&gt;示例:&lt;br&gt;输入: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5-&amp;gt;
      
    
    </summary>
    
    
      <category term="LeetCode" scheme="https://hackeryard.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>常用工具集</title>
    <link href="https://hackeryard.github.io/2018/03/21/tool-set/"/>
    <id>https://hackeryard.github.io/2018/03/21/tool-set/</id>
    <published>2018-03-21T13:31:30.000Z</published>
    <updated>2018-03-23T03:51:26.707Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vim快捷键："><a href="#Vim快捷键：" class="headerlink" title="Vim快捷键："></a>Vim快捷键：</h2><ul><li>跳到第一行  :1 或 gg</li><li>跳到最后一行  :$ 或 Shift+g</li><li>复制  yy</li><li>删除  dd </li><li>撤销  U </li><li>粘贴  P </li></ul><h2 id="加载Python自带Web-Server："><a href="#加载Python自带Web-Server：" class="headerlink" title="加载Python自带Web Server："></a>加载Python自带Web Server：</h2><ul><li>python -m SimpleHTTPServer 80</li><li>python3 -m http.server 80</li></ul><h2 id="Webstorm快捷键"><a href="#Webstorm快捷键" class="headerlink" title="Webstorm快捷键"></a>Webstorm快捷键</h2><ul><li>Ctrl + Alt + L 格式化代码</li><li>双击shift 全局查找</li><li>快速代码补全 emmet </li><li>快速生成框架 !html</li></ul><h2 id="Onenote使用笔记"><a href="#Onenote使用笔记" class="headerlink" title="Onenote使用笔记"></a>Onenote使用笔记</h2><ul><li>截图：Win+shift+S</li></ul><h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><ul><li>重新加载配置：nginx -s reload</li><li>快速关闭：nginx -s stop</li><li>安全关闭：nginx -s quit</li></ul><h2 id="FFmpeg"><a href="#FFmpeg" class="headerlink" title="FFmpeg"></a>FFmpeg</h2><h2 id="celery-4-in-Windows"><a href="#celery-4-in-Windows" class="headerlink" title="celery 4 in Windows"></a>celery 4 in Windows</h2><ul><li>不支持pool：celery -A your_app_name worker –pool=solo -l info</li></ul><h2 id="lsof：list-open-files"><a href="#lsof：list-open-files" class="headerlink" title="lsof：list open files"></a>lsof：list open files</h2><p>查看进程打开的文件列表</p><ul><li>lsof -c -p pid</li><li>lsof -c program</li></ul><h2 id="获取当前缓存（加载）的动态链接库："><a href="#获取当前缓存（加载）的动态链接库：" class="headerlink" title="获取当前缓存（加载）的动态链接库："></a>获取当前缓存（加载）的动态链接库：</h2><ul><li>ldconfig -p | grep libssh</li></ul><h2 id="查看可执行文件所依赖的库："><a href="#查看可执行文件所依赖的库：" class="headerlink" title="查看可执行文件所依赖的库："></a>查看可执行文件所依赖的库：</h2><ul><li>ldd 绝对路径</li><li>（程序的某个section中会记录动态链接的信息）</li></ul><h2 id="aliases"><a href="#aliases" class="headerlink" title="aliases"></a>aliases</h2><ul><li>alias de=’ps -ef |grep’</li><li>alias c=’clear’</li><li>alias ncat=’netstat -nlp |grep’</li><li>alias listp=’pkg-config –list-all |grep’</li><li>alias versionp=’pkg-config –modversion’</li><li>alias finf=’find / -name’</li><li>alias s=’apt-cache search’</li></ul><h2 id="高亮日志分析工具（log-navigator）："><a href="#高亮日志分析工具（log-navigator）：" class="headerlink" title="高亮日志分析工具（log navigator）："></a>高亮日志分析工具（log navigator）：</h2><ul><li>apt-get install lnav</li></ul><h2 id="ovs"><a href="#ovs" class="headerlink" title="ovs"></a>ovs</h2><ul><li><p>运维：</p><ul><li>运维脚本位置<ul><li>/usr/share/openvswitch/scripts</li><li>/usr/local/share/openvswitch/scripts</li></ul></li><li>启动：ovs-ctl start</li><li>重启：ovs-ctl restart</li><li>状态：ovs-ctl status</li></ul></li><li><p>查看日志：</p><ul><li>ovsdb-tool show-log</li></ul></li><li><p>查看ovsdb里面的数据表：</p><ul><li>ovsdb-client list-tables</li></ul></li><li><p>查看ovsdb中的相关字段定义</p><ul><li>ovsdb-client list-columns Interface | grep ofport</li></ul></li><li><p>查看ovsdb中的相关数据：</p><ul><li>ovs-vsctl  – –columns=external_ids,name,ofport,ofport_request  list Interface</li></ul></li><li><p>alias:</p><ul><li>alias ovss=’ovs-vsctl show’</li><li>alias apps=’ovs-appctl fdb/show’</li><li>alias ofs=’ovs-ofctl show ofc-bridge’</li></ul></li></ul><h2 id="编译相关"><a href="#编译相关" class="headerlink" title="编译相关"></a>编译相关</h2><ul><li><p>cmake：</p><ul><li>一个跨平台编译工具 用于生成适配平台的Makefile</li><li>mkdir build</li><li>cd build</li><li>cmake ..</li><li>make &amp;&amp; make install</li><li>重新cmake之前需要删除CMakeCache.txt</li></ul></li><li><p>pkg-config:</p><ul><li>编译库的时候 使用这个工具管理其依赖</li><li>即记录头文件和库文件的存放位置 用于编译和链接</li><li>pkg-config –list-all | grep libnetconf</li><li>pkg-config  –modversion libnetconf</li></ul></li></ul><h2 id="IPv6-DNS"><a href="#IPv6-DNS" class="headerlink" title="IPv6 DNS:"></a>IPv6 DNS:</h2><ul><li>国内公共DNS（延迟2ms）：<ul><li>240c::6666</li><li>240c::6644</li></ul></li><li>he.net(US延迟156ms）：<ul><li>2001:470:20::2</li><li>2001:470:0:9d::2</li></ul></li><li>Google（延迟156ms）：<ul><li>2001:4860:4860::8888</li><li>2001:4860:4860::8844</li></ul></li></ul><h2 id="屏蔽广告："><a href="#屏蔽广告：" class="headerlink" title="屏蔽广告："></a>屏蔽广告：</h2><ul><li>hosts方式：<ul><li>0.0.0.0 xian.qq.com</li><li>0.0.0.0 q.i.gdt.qq.com</li><li>0.0.0.0 v.gdt.qq.com</li><li>0.0.0.0 c.gdt.qq.com</li><li>…</li></ul></li><li>插件方式：<ul><li>adblock</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Vim快捷键：&quot;&gt;&lt;a href=&quot;#Vim快捷键：&quot; class=&quot;headerlink&quot; title=&quot;Vim快捷键：&quot;&gt;&lt;/a&gt;Vim快捷键：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;跳到第一行  :1 或 gg&lt;/li&gt;
&lt;li&gt;跳到最后一行  :$ 或 Shift+g
      
    
    </summary>
    
      <category term="工具" scheme="https://hackeryard.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具 备忘" scheme="https://hackeryard.github.io/tags/%E5%B7%A5%E5%85%B7-%E5%A4%87%E5%BF%98/"/>
    
  </entry>
  
  <entry>
    <title>hexo博客之旅 [3]: 添加gitment评论和链接分享功能</title>
    <link href="https://hackeryard.github.io/2018/02/03/the-journal-of-hexo-blog-3/"/>
    <id>https://hackeryard.github.io/2018/02/03/the-journal-of-hexo-blog-3/</id>
    <published>2018-02-03T05:42:44.000Z</published>
    <updated>2020-04-25T01:16:30.227Z</updated>
    
    <content type="html"><![CDATA[<p>一个博客如果没有评论和分享功能，势必是单点的，你只是单向的发布信息，读者无法评论和快速分享，这对博主和读者都是巨大的损失。</p><h2 id="添加评论系统"><a href="#添加评论系统" class="headerlink" title="添加评论系统"></a>添加评论系统</h2><p><a href="https://github.com/imsun/gitment/" target="_blank" rel="noopener">gitment</a>是一个基于github issue给博客添加评论的系统，原理大概是通过博客作者在某个repo创建带有某个label的issue，来为某篇博客对应评论，由于github的在线编辑器支持markdown预览，还是很优雅的，而且这样做也不用为hexo这样的静态博客添加动态代码来存取评论。</p><p>一篇博客对应一个issue，只有博主经过授权后，才可以初始化issue，这样后续的读者就可以用自己的github账号登录博主的gitment应用，来向这篇博客添加评论，里面的对文章的点赞和对其他用户的点赞，其实跟issue主页的点击操作一样，都是通过api操作的。</p><p>这么说来，gitment只是一个基于issue的评论前台，用于存取issue里面的评论数据。</p><p>部署的时候，我参考了<a href="https://blog.fundebug.com/2017/06/16/how-to-use-gitment/" target="_blank" rel="noopener">这篇文章</a>，并且遇到了一个问题，登录自家博客之后，文章底部出现了gitment的框架，由于没有初始化issue，点击初始化按钮后，提示<a href="https://github.com/imsun/gitment/issues/114" target="_blank" rel="noopener">Validation Failed</a>，</p><p>一番搜索后，发现是github issue中的label长度有限制，不能超过50字节。</p><p><img src="/images/label-limit.png" alt="label长度 &lt;= 50字节"></p><p>查看js代码后，发现id是<em>window.location.href</em>，这样长度会经常超出。由于我之前文章的url都是英文的，所以使用url中的英文标题作为id，后续需要整理一番英文title，以正常初始化issue:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mod_id = <span class="built_in">window</span>.location.href.split(<span class="string">"/"</span>);</span><br><span class="line">mod_id = mod_id[mod_id.length - <span class="number">2</span>];</span><br><span class="line"><span class="built_in">Object</span>.assign(<span class="keyword">this</span>, &#123;</span><br><span class="line">  id: mod_id,</span><br><span class="line">  title: <span class="built_in">window</span>.document.title,</span><br><span class="line">  link: <span class="built_in">window</span>.location.href</span><br></pre></td></tr></table></figure><p>gitment评论系统很优雅，虽然有时候github的国内访问速度超慢，但github的数据很稳定，不会像多说一样为数据丢失担忧。</p><p>在使用过程中，发现gitment对于新文章的初始化需要博主自己点击，这对像我这样从其他博客迁移过来的用户而言，重复几十次的点击就不是那么有意思了。</p><p>为此，我写了一个自动化脚本，工作流程如下：</p><ol><li>由于新开的chrome不包含github已登录session和cookie，所以需要模拟登录github账号</li><li>获取站点sitemap.xml，如(<a href="https://hackeryard.github.io/sitemap.xml)，解析成文章的url">https://hackeryard.github.io/sitemap.xml)，解析成文章的url</a></li><li>依次模拟打开上述url，初次打开需要login，之后的文章则不再需要</li><li>对每篇文章模拟点击init button，如果点击出错，表示已被初始化；如果成功，表示正在初始化，sleep 5s后打开下一个url</li></ol><p>脚本在<a href="https://github.com/hackeryard/hexo-plugins/blob/master/init-gitment.py" target="_blank" rel="noopener">这里</a>，欢迎使用！</p><h2 id="替换分享链接到国内社交站点"><a href="#替换分享链接到国内社交站点" class="headerlink" title="替换分享链接到国内社交站点"></a>替换分享链接到国内社交站点</h2><p>话说hexo是一个台湾开发者写的，文章的默认分享都是分享到国外的社交平台，如Twitter/Facebook/G+等，能上这些网站的用户固然是少数，所以把分享功能本地化是很有必要的。</p><p>首先,我参考了<a href="https://blanboom.org/2015/hack-hexo-theme-landscape/" target="_blank" rel="noopener">这篇文章</a>，由于我是用的hexo，其landscape主题里面的fonts是4.0.3版本的fontawesome，导致qq和腾讯微博的图标无法显示，按照文中的方法折腾了最新版的5.0.6版本，找到webfont子目录，替换了hexo中的fonts下的文件，发现这次原有图标失效，新添加了四个分享按钮却是正常的，我以为是缓存的问题，又去看了Edge浏览器，还有手机Brave/Chrome浏览器，仍然不行，正打算撤回老版本的时候，发现fontawesome的4和5版本差别很大(的确，想想python2/3，主版本间的差别可能很大)，这可能就是不兼容的原因。</p><p>没在fontawesome官网上找到老版本的存档，搜了半天，找到一个<a href="http://fontawesome.dashgame.com/" target="_blank" rel="noopener">4.7版本的站点</a>，下载后解压，然后更新版本号即可。</p><h2 id="其他参考"><a href="#其他参考" class="headerlink" title="其他参考"></a>其他参考</h2><p><a href="http://www.codertian.com/2016/03/14/change-landscape-theme-by-yourself/" target="_blank" rel="noopener">【实用技能】教你定制Hexo的landscape打造自己的主题</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一个博客如果没有评论和分享功能，势必是单点的，你只是单向的发布信息，读者无法评论和快速分享，这对博主和读者都是巨大的损失。&lt;/p&gt;
&lt;h2 id=&quot;添加评论系统&quot;&gt;&lt;a href=&quot;#添加评论系统&quot; class=&quot;headerlink&quot; title=&quot;添加评论系统&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="博客" scheme="https://hackeryard.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="hexo" scheme="https://hackeryard.github.io/tags/hexo/"/>
    
      <category term="blog" scheme="https://hackeryard.github.io/tags/blog/"/>
    
      <category term="gitment" scheme="https://hackeryard.github.io/tags/gitment/"/>
    
      <category term="github" scheme="https://hackeryard.github.io/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>hexo博客之旅 [2]: 利用webhooks自动部署hexo博客</title>
    <link href="https://hackeryard.github.io/2018/01/29/the-journal-of-hexo-blog-2/"/>
    <id>https://hackeryard.github.io/2018/01/29/the-journal-of-hexo-blog-2/</id>
    <published>2018-01-29T05:42:44.000Z</published>
    <updated>2020-04-20T04:02:16.614Z</updated>
    
    <content type="html"><![CDATA[<p>以前觉得hook是个深奥的技术，的确，到现在我还没写过一个hook，网上有很多文章讲hook都是用的win32 API，不知何时我竟然看不下去这种代码了，不知是喜是忧。</p><p>从<a href="https://developer.github.com/webhooks/" target="_blank" rel="noopener">Github给出的解释</a>搬运一段如下：</p><blockquote><p>Webhooks allow you to build or set up GitHub Apps which subscribe to certain events on GitHub.com. When one of those events is triggered, we’ll send a HTTP POST payload to the webhook’s configured URL. Webhooks can be used to update an external issue tracker, trigger CI builds, update a backup mirror, or even deploy to your production server. You’re only limited by your imagination.</p></blockquote><p>webhooks就是这样一种机制，当你的repo有某个特定的事件发生时，比如push/PR/issue/fork等，github在后台会向你填写的URL发送一个POST请求，里面包含了很多信息，比如issue会有sender和相应的repo，还有issue的地址等。</p><p>另外这段话里面也说明了<em>update a backup mirror</em>这个用法，vps上面的镜像博客给百度索引，github.io给谷歌索引。</p><p>根据webhooks的用法，我们在github pages的repo里面订阅对push事件的钩子，vps后台开启一个简单的web server监听此请求，然后使用git pull更新github pages里面的静态博客文件到本地。</p><p><img src="/images/webhooks.png" alt="设置Webhooks"></p><p>之前参考的一篇博客已经记不起来了，只记得是用node写的，我用python重写了一下，见<a href="https://github.com/hackeryard/hexo-plugins/blob/master/webhook.py" target="_blank" rel="noopener">github</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;以前觉得hook是个深奥的技术，的确，到现在我还没写过一个hook，网上有很多文章讲hook都是用的win32 API，不知何时我竟然看不下去这种代码了，不知是喜是忧。&lt;/p&gt;
&lt;p&gt;从&lt;a href=&quot;https://developer.github.com/webhoo
      
    
    </summary>
    
      <category term="博客" scheme="https://hackeryard.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="hexo" scheme="https://hackeryard.github.io/tags/hexo/"/>
    
      <category term="blog" scheme="https://hackeryard.github.io/tags/blog/"/>
    
      <category term="webhooks" scheme="https://hackeryard.github.io/tags/webhooks/"/>
    
      <category term="部署" scheme="https://hackeryard.github.io/tags/%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>hexo博客之旅 [1]: 初探hexo</title>
    <link href="https://hackeryard.github.io/2018/01/29/the-journal-of-hexo-blog-1/"/>
    <id>https://hackeryard.github.io/2018/01/29/the-journal-of-hexo-blog-1/</id>
    <published>2018-01-29T04:42:44.000Z</published>
    <updated>2020-04-20T06:36:17.838Z</updated>
    
    <content type="html"><![CDATA[<p>经历过WordPress，也尝试过github pages，因为WordPress的数据库由于机器内存吃紧，经常掉线，另一个原因是有人ddos，恶意攻击我的站点，导致我设置了一个定时任务，每一个小时重启数据库，基本可用。</p><p>github pages可以用来存放静态博客，以前用过来存放俱乐部站点或个人主页，但没充分利用来写博客。</p><p>借用官网的解释，Hexo 是一个快速、简洁且高效的博客框架，目前我们看到的很多IT博客都是用的hexo + next主题，认同度是比较高的。<br>初识Hexo，可以从<a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">官方文档</a>开始了解。</p><p>最初是在vps上搭建，但是平时习惯用vscode编辑器，所以就在本地搭建一个博客，然后push到github pages，其实这样一个静态博客就可以访问了，但由于github.io禁止百度爬虫爬取，所以对于百度的SEO影响很大，也就是你的博客在百度里面几乎找不到。一个解决方法是用vps镜像一份博客内容，然后手动添加到百度的收录里去，详见<a href="/2018/01/29/the-journal-of-hexo-blog-2">hexo博客之旅 [2]: 利用webhooks自动部署hexo博客</a>。</p><p>安装好nodejs、git for windows、和hexo之后，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog</span><br><span class="line"><span class="built_in">cd</span> blog</span><br></pre></td></tr></table></figure></p><p>生成如下目录：</p><ul><li>source(博客的源文件，用于生成最终的public目录下的各个文件)<ul><li>_draft(保存的草稿)</li><li>_post(你将要写的一篇篇的以md结尾的博客)</li></ul></li><li>themes<ul><li>landscape(默认的主题)</li></ul></li><li>_config.yml(全局的配置文件)</li><li>package.json(保存项目的依赖关系)</li></ul><p>之后，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br><span class="line">或者简写： hexo g</span><br></pre></td></tr></table></figure><p>生成public目录，这个目录就是我们最终要放到github pages上的，接着我们测试一下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br><span class="line">或者简写： hexo s</span><br></pre></td></tr></table></figure></p><p>然后打开 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 见第一面吧！</p><p>如果想更换端口，使用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server -p [port]</span><br></pre></td></tr></table></figure></p><p>到这里本地部署已经完成了，接下来就是部署到github：<br>新建一个repo为[your_github_name].github.io, 然后在repo的settings里面设置开启github pages：</p><p><img src="/images/pages.png" alt="开启github pages"></p><p>接下来设置通过ssh来免密连接github，用于后期git操作不用重复输入密码，而且理论上更安全，这里推荐<a href="http://blog.zfan.me/2015/09/01/%E7%94%A8SSH-key%E5%85%8D%E5%8E%BBgithub%E6%8F%90%E4%BA%A4%E6%97%B6%E8%BE%93%E5%85%A5%E5%AF%86%E7%A0%81/" target="_blank" rel="noopener">一篇文章</a></p><p>按照上面的操作，部署到github，并通过[your_github_name].github.io访问。<br>如果有出错，建议安装<a href="https://hexo.io/zh-cn/docs/deployment.html#Git" target="_blank" rel="noopener">git的插件</a></p><p>另外，你可能需要补一下markdown的语法，这里推荐一篇<a href="https://hyxxsfwy.github.io/2016/01/15/Hexo-Markdown-%E7%AE%80%E6%98%8E%E8%AF%AD%E6%B3%95%E6%89%8B%E5%86%8C/" target="_blank" rel="noopener">Hexo-Markdown-简明语法手册</a></p><p>当你慢慢的，写的博客越来越多时，你可能还需要一个README，让别人在访问的repo的时候，就可以对你的博客有一个清晰地了解，我起初在网上没找到代码，就可以写了个<a href="https://github.com/hackeryard/hexo-plugins" target="_blank" rel="noopener">generate_readme</a>，可以复用</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;经历过WordPress，也尝试过github pages，因为WordPress的数据库由于机器内存吃紧，经常掉线，另一个原因是有人ddos，恶意攻击我的站点，导致我设置了一个定时任务，每一个小时重启数据库，基本可用。&lt;/p&gt;
&lt;p&gt;github pages可以用来存放静
      
    
    </summary>
    
      <category term="博客" scheme="https://hackeryard.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="hexo" scheme="https://hackeryard.github.io/tags/hexo/"/>
    
      <category term="blog" scheme="https://hackeryard.github.io/tags/blog/"/>
    
      <category term="js" scheme="https://hackeryard.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>Vincent之死</title>
    <link href="https://hackeryard.github.io/2018/01/19/the-death-of-Vincent/"/>
    <id>https://hackeryard.github.io/2018/01/19/the-death-of-Vincent/</id>
    <published>2018-01-18T23:35:44.000Z</published>
    <updated>2018-01-19T06:25:02.441Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>下文所述仅依靠电影《Loving Vincent》中的故事对Vincent之死作一个推断，在这部电影之前，我并没有看过有关梵高更多的记载。</p></blockquote><p>这是一部来自100多个艺术家的协作而完成的对梵高的致敬之作，Loving Vincent只是Vincent在给弟弟Theo写的信的末尾用语，类似于Yours Sincerely，以此作为题目，说明Vincent对弟弟Theo深深的爱，Vincent几乎每天都要给弟弟写信，诉说自己的近况和对弟弟的思念，还有心底的愧疚。</p><p>那么Vincent是怎么死的？</p><p>如果Vincent是自杀，为什么不跟Mazery医生说的那样，饮弹或者对准太阳穴、心脏这样的致命部位来一枪，而选择了在胃部开了一枪，然后一路忍受痛苦回到卧室，之后还有漫长的等待？</p><p>如果是他杀，想想也只有可能是富家公子Rene，但他也不会无端想要杀死Vincent，他们之间并不存在致命的冲突。</p><p>我一开始也没想到，我觉得Mazery医生说的很有道理，但是我也没考证过那时候的枪到底能不能在距离身体几十公分的位置发射，然后不打穿身体的。现在我觉得这个是没问题的，医生形容得过于夸张了，他怀疑是别人暗杀才可以达到那样的效果。</p><p>回看第二遍的时候，处处隐藏着Vincent执意要自杀的种种看似合理的理由，他给弟弟写信说自己度日如年，他来到弟弟的住所，然后更加知晓了弟弟的状况，他的好朋友玛格丽特被Gachet医生限制住，不跟Vincent来往，他被医生还刺激了一下（医生说他说了作为一个医生所不该说的话）… 这些仿佛都在诉说一个伟大画家的即将凋零，但这里面还有冲突：</p><ul><li>医生把女儿限制住，不是要给Vincent不被打扰的作画环境吗，为什么又跟Vincent吵了一架，而且可以推测，他不该说的话好像就是Vincent应该找个其他的谋生手段，不让自己的作画产生的经济负担压垮弟弟的家庭？</li><li>医生是军医，可以帮Vincent取出子弹，但是他见死不救</li><li>在电影中，枪击现场竟然没有出现，麦田里应该有那把手枪，还有他的画架</li></ul><p>第一条，医生很照顾Vincent，但是他终归不是他的衣食父母，所以他让女儿不跟Vincent接触，理由却是不背打扰伟大画家的锅，其实他有所打算，所以他还是劝Vincent，我猜测大概就是别去作这些没人买的画了，为弟弟减负，但是他不听，反而起火了，甚至刻薄到说出医生是个伪艺术家这样的话，对于一个对艺术心存敬畏和追求的人而言，这是致命的打击。</p><p>第二条，医生本来希望他想想自己接下来的生活，他的目的是让他好好活下去，但是看到负弹的Vincent，他明白他活不久了，他对死的决心由来已久，所以什么也没有做。</p><p>第三条，枪击现场没有出现，警察也只是翻找Vincent卧室的东西，那里肯定没有证据，所以最重要的现场竟然不存在，这决定了无法进一步推测Vincent具体的死法。</p><p>最大的疑点是，Vincent为什么要忍受长久的痛苦，回到卧室等死？<br>我以为，他是有话给Gachet医生说，还有他的弟弟Theo。</p><p>医生看到这个样子的Vincent，一定以为是自己说了不该说的话，也就是上次争吵的事，而引发这次事件的，Vincent回来而不是立即自杀，是要医生明白，“我觉得这对大家都好”，这件事跟他无关。</p><p>Vincent最后也希望Theo到场，希望最后的时光能够有弟弟陪在身旁，这中间自有手足之情，还有Vincent对Theo的愧疚与解脱后的宽慰。</p><p>电影提到，他的出生很大程度决定了他性格的养成，从他的父母那里看出他注定是一个孤独的孩子，而孤独的孩子总是很敏感。</p><p>与弟弟相依为命，靠着作画展现自己的才华，却得不到艺术届的认同，估计放在中国古代，就会多一个怀才不遇的诗人，但是Vincent，我觉得他是彻底绝望的，他深爱的弟弟被自己慢慢拖垮，他的艺术也没得到人们的认同，他陷入了彻底的恐惧，并且在梦里，那激情的，梦幻的星空总是向他投来橄榄枝，他想要逃避，但同时他又说自己走在通往星空的路上。</p><p>对于我以为的艺术家而言，自杀才是主动的靠近那梦里星空所描绘的世界，而他完成了这个目的。</p><p>这是一个悲剧。</p><p>令我不解的是，医生和画铺子老板等人在Vincent生前都可以看出他的才华，为什么就不买一些他的画作？（电影最后说他生前只卖出一幅）</p><p>没有人知道全部真理，尽管电影中的Ravoux家族和Gachet家族的人，以及Mazery医生，仿佛都对Vincent的死抱有坚定不移的态度。</p><p>最后，我想起了宫泽贤治，还有海子的死。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;下文所述仅依靠电影《Loving Vincent》中的故事对Vincent之死作一个推断，在这部电影之前，我并没有看过有关梵高更多的记载。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这是一部来自100多个艺术家的协作而完成的对梵高的致敬之作，Lov
      
    
    </summary>
    
      <category term="随想集" scheme="https://hackeryard.github.io/categories/%E9%9A%8F%E6%83%B3%E9%9B%86/"/>
    
    
      <category term="电影" scheme="https://hackeryard.github.io/tags/%E7%94%B5%E5%BD%B1/"/>
    
      <category term="Vincent" scheme="https://hackeryard.github.io/tags/Vincent/"/>
    
      <category term="梵高" scheme="https://hackeryard.github.io/tags/%E6%A2%B5%E9%AB%98/"/>
    
  </entry>
  
  <entry>
    <title>如何发送空UDP报文</title>
    <link href="https://hackeryard.github.io/2017/07/03/how-to-send-a-null-udp-packet/"/>
    <id>https://hackeryard.github.io/2017/07/03/how-to-send-a-null-udp-packet/</id>
    <published>2017-07-03T09:58:16.000Z</published>
    <updated>2020-04-20T04:00:38.637Z</updated>
    
    <content type="html"><![CDATA[<p><em>我们知道UDP是无连接的，接收和发送一个报文是独立的，而TCP则实现了一整套的诸如流量控制和拥塞控制机制，保证连接的可靠性。</em></p><hr><p>在本文中，你将了解在Socket API中如何发送一个空的UDP报文，并且通过tcpdump抓取后用wireshark查看报文内容。</p><p>本文缘起对recvfrom的返回值的困惑，因为在TCP中，用recv或者read函数，我们可以通过其返回值是否为0，来判断对端的连接状态，是则表示对端关闭写通道，更可能的情况是close掉了连接。<br>但是在UDP中很少见到recvfrom的返回值是0，在man手册中，只说了TCP的recv保留0以指示对端关闭的情况，这个TCP包是空的，因为只需要TCP头部的FIN信息。</p><p>所以，动手看看吧！<br>recvfrom返回0表示有数据包达到，但是数据部分为空，在wireshark中看到，UDP的长度字段为8，正好是UDP的头部长度，数据部分的确为空。</p><p>下图是通过sendto函数广播的空UDP报文：<br><img src="/images/udp0.png" alt="udp空数据" title="udp空数据"></p><p>发送使用sendto，只是设置发送的长度为0，发现返回值为0；同样，接收使用recvfrom，接收广播的消息，发现当空数据包达到时，返回值为0。如下：</p><p><code>sendto(sockfd, buffer, 0, 0, (struct sockaddr *)&amp;amp;brctaddr, addrsize);recvfrom(sockfd, buffer, 0, 0, NULL, NULL);</code></p><p>另外在广播过程中，使用<code>tcpdump udp port 5001 -w test.pcap</code>监听5001端口的流量，并保存在test.pcap中供wireshark查看。</p><p>实验结束。</p><hr><p>TODO： socket API对应的内核相关操作（select和非阻塞IO等）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;em&gt;我们知道UDP是无连接的，接收和发送一个报文是独立的，而TCP则实现了一整套的诸如流量控制和拥塞控制机制，保证连接的可靠性。&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;在本文中，你将了解在Socket API中如何发送一个空的UDP报文，并且通过tcpdump抓取后用wir
      
    
    </summary>
    
      <category term="网络分析" scheme="https://hackeryard.github.io/categories/%E7%BD%91%E7%BB%9C%E5%88%86%E6%9E%90/"/>
    
    
  </entry>
  
  <entry>
    <title>node实践 0x00</title>
    <link href="https://hackeryard.github.io/2017/05/16/node-000/"/>
    <id>https://hackeryard.github.io/2017/05/16/node-000/</id>
    <published>2017-05-16T11:04:04.000Z</published>
    <updated>2018-01-19T01:31:21.196Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>接触node这十多天来，想想因为网站比赛的缘故，开始较为系统的学前后端，从阮一峰老师的博客得知他也在使用node开发，所以更加正好试试node进行开发。</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>node又称nodejs，它提供了有别于浏览器的js执行环境，通过添加硬盘和网络io库的方式让js支持后端运行，而不必束缚在浏览器里处理UI。<br>另外Google v8引擎给了node强劲的性能，在《深入浅出Node.js》中，作者给出很多例子，比如计算同样位数的斐波那契数列，node的性能超过java，也曾有公司把网站用node重写，相比ruby，服务器削减了十倍，从中可见一斑。<br>node的一大特色就是异步io，我们知道，在网络服务中，服务进程大多是io密集型的，如果使用阻塞io库，进程将经常等待io完成，明白点说，在操作系统中，当一个进程被阻塞时，调度器会在就绪队列中选一个占用cpu进行执行，io一般又相当费时，当对于cpu这个计算资源而言，此进程就浪费掉了一部分时间片，从而影响性能，在需要尽量实时的服务上尤为明显。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;接触node这十多天来，想想因为网站比赛的缘故，开始较为系统的学前后端，从阮一峰老师的博客得知他也在使用node开发，所以更加正好试试nod
      
    
    </summary>
    
      <category term="Node" scheme="https://hackeryard.github.io/categories/Node/"/>
    
    
  </entry>
  
  <entry>
    <title>安装python科学计算库 [windows下]</title>
    <link href="https://hackeryard.github.io/2017/05/14/install-scientific-lib-modules-in-windows/"/>
    <id>https://hackeryard.github.io/2017/05/14/install-scientific-lib-modules-in-windows/</id>
    <published>2017-05-13T16:35:13.000Z</published>
    <updated>2018-01-19T01:30:53.834Z</updated>
    
    <content type="html"><![CDATA[<p>由于今天数据挖掘练习的缘故，需要安装一些常用的科学计算库，如耳熟能详的numpy，scipy，sklearn，matplotlib，seaborn等。</p><p>本机python 32位版本3.6，使用pip3安装相关库，看到知乎上要说换用anaconda（附带python和一些扩展库），再用conda工具安装没有的库，可以很好的解决依赖问题。由于我对Python的依赖关系的管理没有深入了解，只依赖于pip或者easy_install的使用，所以当遇到pip安装某个库失败时，就有些无措了。</p><p>解决方法如下：</p><p>前往<a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/#numpy" target="_blank" rel="noopener">http://www.lfd.uci.edu/~gohlke/pythonlibs/#numpy</a>下载适合自己版本（我的是cp36，对应python3.6）的numoy+mkl（mkl是intel math kernal lib的意思，估计由于这样的原因，这种打包的numpy无法使用pip官方安装，也即就算pip install numpy成功了，当import scipy的时候，执行仍然报错，报错原因就是找不到numpy+mkl）</p><p>我用的校园网，实际下载速度只有15KB，而且经常断线且服务器不支持断点续传，所以很无奈。当想到有国内国外的vps，就挂上去看了下，使用</p><p>[c]wget <a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/xuoh7y4k/numpy-1.13.0rc1+mkl-cp36-cp36m-win32.whl[/c" target="_blank" rel="noopener">http://www.lfd.uci.edu/~gohlke/pythonlibs/xuoh7y4k/numpy-1.13.0rc1+mkl-cp36-cp36m-win32.whl[/c</a>]</p><p>发现404错误，用curl同样无法下载，苦闷中，发现用这个地址放到浏览器可以直接下载，所以应该是服务器屏蔽bot下载了，在wget后加</p><p>[c]–user-agent=&quot;Mozilla/5.0&quot; [/c]</p><p>即可。</p><p>通过<a href="https://www.filezilla.cn/" target="_blank" rel="noopener">sftp工具</a>下载到本机用pip3安装即可。</p><p>之后再安装其他依赖于mkl的库就没有问题了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;由于今天数据挖掘练习的缘故，需要安装一些常用的科学计算库，如耳熟能详的numpy，scipy，sklearn，matplotlib，seaborn等。&lt;/p&gt;
&lt;p&gt;本机python 32位版本3.6，使用pip3安装相关库，看到知乎上要说换用anaconda（附带pyth
      
    
    </summary>
    
      <category term="随想集" scheme="https://hackeryard.github.io/categories/%E9%9A%8F%E6%83%B3%E9%9B%86/"/>
    
    
  </entry>
  
  <entry>
    <title>15年某日手记</title>
    <link href="https://hackeryard.github.io/2017/04/16/some-tough-thoughts-in-2015/"/>
    <id>https://hackeryard.github.io/2017/04/16/some-tough-thoughts-in-2015/</id>
    <published>2017-04-16T15:22:14.000Z</published>
    <updated>2018-01-19T01:30:46.696Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>人这东西，要学会与自己相处，与欲望同行，无论魏晋。<br>欲望是什么？</p><p>软件不足，还想要更多更好的硬件。</p><p>在物质领域，这也是人们生生不息的追求吧。</p></blockquote><p>–6.25</p><blockquote><p>老师还是讲点玄学的好，这样才完美。</p></blockquote><p>–6.25</p><blockquote><p>今天我写下的东西，不能明天就看不下去。</p><p>一半花开，一半花落。</p><p>一些细节被永远的抹杀了，走着走着就忘记了曾经的自己（真实的）。</p></blockquote><p>–6.26</p><p>&nbsp;</p><blockquote><p>火已燃，心为之动，愿无悔。</p></blockquote><p>–不详</p><blockquote><p>一忌好为人师，二忌比来比去。</p><p>学习的基本单位是集体而非个人，在组织中，团体中每一个人需要成长和学习，并且是向着共同的目标奋进的。</p><p>优秀组织中的个人应该觉得自己属于一个比自我更强大的实体。</p></blockquote><p>–不详</p><blockquote><p>我更倾向于成为一个学者。</p></blockquote><p>–7.03</p><p>&nbsp;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;人这东西，要学会与自己相处，与欲望同行，无论魏晋。&lt;br&gt;欲望是什么？&lt;/p&gt;
&lt;p&gt;软件不足，还想要更多更好的硬件。&lt;/p&gt;
&lt;p&gt;在物质领域，这也是人们生生不息的追求吧。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;–6.25&lt;/p&gt;
&lt;bloc
      
    
    </summary>
    
      <category term="随想集" scheme="https://hackeryard.github.io/categories/%E9%9A%8F%E6%83%B3%E9%9B%86/"/>
    
    
  </entry>
  
  <entry>
    <title>apt-get笔记</title>
    <link href="https://hackeryard.github.io/2017/04/07/apt-get-bookmark/"/>
    <id>https://hackeryard.github.io/2017/04/07/apt-get-bookmark/</id>
    <published>2017-04-07T01:39:33.000Z</published>
    <updated>2018-01-19T01:31:13.693Z</updated>
    
    <content type="html"><![CDATA[<p>apt-get是debian下的简易安装工具，可以解决依赖问题，但在使用过程中，也遇到一些问题，与大家分享：</p><p><code>apt-get install xxx</code>之后，如果需要卸载此包，那么通过<code>apt-get remove xxx</code>之后，只是删除了二进制文件而已，还有配置和数据文件没有删除，这往往给我们带来麻烦，可以通过<code>apt-get  purge xxx</code>删除所有的关于包xxx的内容，另外，如果想同时删除安装xxx时安装的依赖包，可以通过<code>apt-get autoremove</code>来完全去除依赖。</p><p>另外推荐一个安装工具aptitude，它是apt-get的图形化版本，但是可以简单的解决删除安装包和依赖的问题：<code>aptitude remove xxx</code>，使用此方法的前提是通过aptitude安装xxx，即<code>aptitude install xxx</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;apt-get是debian下的简易安装工具，可以解决依赖问题，但在使用过程中，也遇到一些问题，与大家分享：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;apt-get install xxx&lt;/code&gt;之后，如果需要卸载此包，那么通过&lt;code&gt;apt-get remove xxx&lt;/c
      
    
    </summary>
    
      <category term="Ubuntu学习" scheme="https://hackeryard.github.io/categories/Ubuntu%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>MPICH 3.X安装简明指南（2）【ubuntu】</title>
    <link href="https://hackeryard.github.io/2017/04/07/mpich-3-x-easy-install-in-ubuntu-2/"/>
    <id>https://hackeryard.github.io/2017/04/07/mpich-3-x-easy-install-in-ubuntu-2/</id>
    <published>2017-04-07T01:22:50.000Z</published>
    <updated>2018-01-19T01:31:26.451Z</updated>
    
    <content type="html"><![CDATA[<p>本文基于Ubuntu 14.04安装mpich2，亲测有效：</p><blockquote><p>安装：</p></blockquote><p>[c]apt-get install mpich2 libmpich2-dev mpich2-doc[/c]</p><blockquote><p>测试：</p></blockquote><p>[c]which mpicc[/c]</p><p>一般返回：</p><p>[c] /usr/bin/mpicc[/c]</p><p>另外的步骤按照<a href="https://myard.org/runkingblog/2017/04/mpich-3-x-ealy-install-guide/" target="_blank" rel="noopener">第一篇文章</a>操作即可。</p><p>通过此方法安装的mpich版本为3.0.5，并非最新，可以通过以下命令查看：</p><p>[c]mpicc -v [/c]</p><p>&nbsp;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文基于Ubuntu 14.04安装mpich2，亲测有效：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;安装：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;[c]apt-get install mpich2 libmpich2-dev mpich2-doc[/c]&lt;/p&gt;
&lt;b
      
    
    </summary>
    
      <category term="MPICH TUTOR" scheme="https://hackeryard.github.io/categories/MPICH-TUTOR/"/>
    
    
  </entry>
  
  <entry>
    <title>MPICH 3.X安装简明指南【ubuntu】</title>
    <link href="https://hackeryard.github.io/2017/04/07/mpich-3-x-ealy-install-guide/"/>
    <id>https://hackeryard.github.io/2017/04/07/mpich-3-x-ealy-install-guide/</id>
    <published>2017-04-07T00:45:05.000Z</published>
    <updated>2018-01-19T01:31:12.293Z</updated>
    
    <content type="html"><![CDATA[<p>本文参考自<a href="http://www.cnblogs.com/awy-blog/p/3311112.html" target="_blank" rel="noopener">mpich2在两台ubuntu上的安装</a>，并对其中过期的内容进行更新，针对mpich3。</p><p>首先打开<a href="http://www.mpich.org/downloads/" target="_blank" rel="noopener">官方下载网站</a>，根据自己的发行版本选择，我在Vmware下安装了两台新的Ubuntu 14.04，一台master，一台slave就行实验环境的搭建。（为节省安装时间，可以先安装master-&gt;安装mpich，再复制虚拟机为salve，因为复制的缘故，用户名都是master，也没关系，就当做是专门执行mpich程序的用户吧）</p><ul><li>下载最新版本：</li></ul><p><a href="/home/master/mpich/bin:/home/master/mpich/include[/c]">c</a>wget <a href="http://www.mpich.org/static/downloads/3.2/mpich-3.2.tar.gz[/c" target="_blank" rel="noopener">http://www.mpich.org/static/downloads/3.2/mpich-3.2.tar.gz[/c</a>]</p><ul><li>解压到本地目录并进入：</li></ul><p><a href="/home/master/mpich/bin:/home/master/mpich/include[/c]">c</a>tar xzvf mpich-3.2.tar.gz[/c]</p><p><a href="/home/master/mpich/bin:/home/master/mpich/include[/c]">c</a>cd mpich-3.2[/c]</p><ul><li>执行配置shell生成Makefile (此处安装在master用户的mpich目录下，你可以相应的更改；并且不适用fortran）：</li></ul><p><a href="/home/master/mpich/bin:/home/master/mpich/include[/c]">c</a> ./configure –prefix=/home/master/mpich –disable-fortran[/c]</p><ul><li>make编译（如果没有此命令，执行apt-get install make -y即可）：</li></ul><p><a href="/home/master/mpich/bin:/home/master/mpich/include[/c]">c</a>make 2&amp;amp;1 |tee make.log[/c]</p><ul><li>安装程序（保存输出日志便于查看安装位置）：</li></ul><p><a href="/home/master/mpich/bin:/home/master/mpich/include[/c]">c</a>make install |tee makeinstall.log[/c]</p><ul><li>添加永久的环境变量：</li></ul><p><a href="/home/master/mpich/bin:/home/master/mpich/include[/c]">c</a>vim /etc/environment[/c]</p><p>添加:</p><p><a href="/home/master/mpich/bin:/home/master/mpich/include[/c]">c</a>source /etc/environment[/c]</p><ul><li>查看安装是否成功：</li></ul><p><a href="/home/master/mpich/bin:/home/master/mpich/include[/c]">c</a>which mpicc[/c]</p><p><a href="/home/master/mpich/bin:/home/master/mpich/include[/c]">c</a>which mpiexec[/c]</p><ul><li>查看版本信息：</li></ul><p><a href="/home/master/mpich/bin:/home/master/mpich/include[/c]">c</a>mpicc -v[/c]</p><ul><li>执行测试程序：<br>在解压的安装包里面，找到examples目录，为了方便可以复制到master家目录的examples下；</li></ul><p>在家目录下执行：</p><p><a href="/home/master/mpich/bin:/home/master/mpich/include[/c]">c</a>mpiexec -n 1 examples/cpi[/c]</p><p>这是一个计算圆周率的程序，如果一切就绪，就可以看到正常的计算结果.</p><ul><li><p>另外还需要设置无密码的ssh登录，让master的mpd可以顺利访问到其他节点（本文为一个slave）：<a href="http://www.linuxproblem.org/art_9.html" target="_blank" rel="noopener">参考这篇文章</a></p></li><li><p>之后测试集群环境：</p></li></ul><p><a href="/home/master/mpich/bin:/home/master/mpich/include[/c]">c</a>cd ~[/c]</p><p><a href="/home/master/mpich/bin:/home/master/mpich/include[/c]">c</a>vim mpd.hosts[/c]</p><p>添加（node1为master，冒号后面的2表示此机器可以执行两个进程，可以自行设置）：</p><p><a href="/home/master/mpich/bin:/home/master/mpich/include[/c]">c</a>node1:2[/c]</p><p><a href="/home/master/mpich/bin:/home/master/mpich/include[/c]">c</a>node2:2[/c]</p><p>添加hosts信息：</p><p><a href="/home/master/mpich/bin:/home/master/mpich/include[/c]">c</a>vim /etc/hosts[/c]</p><p>添加：</p><p><a href="/home/master/mpich/bin:/home/master/mpich/include[/c]">c</a> your_master_ip    node1[/c]</p><p><a href="/home/master/mpich/bin:/home/master/mpich/include[/c]">c</a> your_slave_ip     node2[/c]</p><p>之后可以互ping一下。</p><p>现在可以正式测试了：</p><p><a href="/home/master/mpich/bin:/home/master/mpich/include[/c]">c</a>mpiexec  -f  mpd.hosts  -n 2 examples/cpi[/c]</p><p>可以看到有两个节点都在运行这个程序，如果出现retrun 255的代码，并且看到file not found，应该是没有在slave上面添加可执行文件，通过scp可以完成，格式为：</p><p><a href="/home/master/mpich/bin:/home/master/mpich/include[/c]">c</a>scp examples/cpi  master@node2:~/examples/[/c]</p><p>也即把本地的cpi文件传到node2的examples下，之后就可以执行成功了。</p><p>最后附上官方的<a href="http://www.mpich.org/static/downloads/3.2/mpich-3.2-installguide.pdf" target="_blank" rel="noopener">安装文档</a>和<a href="http://www.mpich.org/static/downloads/3.2/mpich-3.2-userguide.pdf" target="_blank" rel="noopener">用户手册</a>。</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文参考自&lt;a href=&quot;http://www.cnblogs.com/awy-blog/p/3311112.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;mpich2在两台ubuntu上的安装&lt;/a&gt;，并对其中过期的内容进行更新，针对mpic
      
    
    </summary>
    
      <category term="MPICH TUTOR" scheme="https://hackeryard.github.io/categories/MPICH-TUTOR/"/>
    
    
  </entry>
  
  <entry>
    <title>sublime Text 3使用指南</title>
    <link href="https://hackeryard.github.io/2017/04/04/sublime-text-3-user/"/>
    <id>https://hackeryard.github.io/2017/04/04/sublime-text-3-user/</id>
    <published>2017-04-04T01:48:15.000Z</published>
    <updated>2018-01-19T01:31:05.340Z</updated>
    
    <content type="html"><![CDATA[<p>今天开始使用流行的代码编辑器sublime Text，最新版本是3，我使用的kali，其他ubuntu/debian也可以通过deb包安装，如下：</p><p>[c]wget <a href="http://c758482.r82.cf2.rackcdn.com/sublime-text_build-3047_amd64.deb[/c" target="_blank" rel="noopener">http://c758482.r82.cf2.rackcdn.com/sublime-text_build-3047_amd64.deb[/c</a>]</p><p>[c]sudo dpkg -i sublime-text_build-3047_amd64.deb[/c]</p><p>然后shell下使用subl命令打开编辑器，热键“Ctrl+`”，在下部的窗口中输入：</p><p>[python]import urllib.request,os,hashlib; h = ‘df21e130d211cfc94d9b0905775a7c0f’ + ‘1e3d39e33b79698005270310898eea76’; pf = ‘Package Control.sublime-package’; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( ‘<a href="http://packagecontrol.io/" target="_blank" rel="noopener">http://packagecontrol.io/</a>‘ + pf.replace(‘ ‘, ‘%20’)).read(); dh = hashlib.sha256(by).hexdigest(); print(‘Error validating download (got %s instead of %s), please try manual install’ % (dh, h)) if dh != h else open(os.path.join( ipp, pf), ‘wb’ ).write(by)[/python]</p><p>如果上述命令不管用，那就是官方更新了，使用<a href="https://packagecontrol.io/installation#st3" target="_blank" rel="noopener">这个源</a>即可<br>等待片刻，之后用热键“ctrl+shrift+p”打开内置命令搜索，键入：</p><p>[c]install[/c]</p><p>或者</p><p>[c]pci[/c]</p><p>点选Package Control:Install Package，之后键入c大概就是类C的插件，我用的是C Improved<br>之后View-&gt;syntax-&gt;C Improved 即可。</p><p>Tips：<br>一般新安装后，默认开启自动更新，如果不需要的可以通过在Preference-&gt;Setttings User,添加一条：</p><p>[c]&quot;update_check&quot;: false[/c]</p><p>重启编辑器即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天开始使用流行的代码编辑器sublime Text，最新版本是3，我使用的kali，其他ubuntu/debian也可以通过deb包安装，如下：&lt;/p&gt;
&lt;p&gt;[c]wget &lt;a href=&quot;http://c758482.r82.cf2.rackcdn.com/subl
      
    
    </summary>
    
      <category term="随想集" scheme="https://hackeryard.github.io/categories/%E9%9A%8F%E6%83%B3%E9%9B%86/"/>
    
    
  </entry>
  
  <entry>
    <title>网络工具集</title>
    <link href="https://hackeryard.github.io/2017/04/01/network-tools/"/>
    <id>https://hackeryard.github.io/2017/04/01/network-tools/</id>
    <published>2017-04-01T03:47:26.000Z</published>
    <updated>2018-03-17T02:41:51.204Z</updated>
    
    <content type="html"><![CDATA[<p>我们知道，校园网支持ipv6网络，平时我们都是在使用双栈进行网络通信，只是大多时候我们没有发现，也就没有充分利用罢了。（当然我也没有充分利用起来，最近开始学习网络编程，准备写一个ipv6或者双栈下的局域网聊天软件）</p><p><a href="https://zh.wikipedia.org/wiki/%E4%B8%AD%E5%9B%BD%E6%95%99%E8%82%B2%E5%92%8C%E7%A7%91%E7%A0%94%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91" target="_blank" rel="noopener">Cernet2</a>是新一代的教育科研网，基本各大高校都有接入，ipv6本来就是实验性的技术，可以从国内主要主机（云）提供商看出ipv6的现阶段情况，需求还不大，但是基于ipv4地址池的枯竭，以及网络业务对协议的更高的要求（服务质量和安全等等），ipv6最终会淘汰ipv4，继续为人类的信息交流提供支撑。相关方面著名的网站有<a href="http://he.com" target="_blank" rel="noopener">飙风电子</a>，附带一个测试ipv6知识的<a href="http://ipv6.he.net/certification" target="_blank" rel="noopener">链接</a>，前提是你有放在公网上的ipv6的主机可以配置，美国的<a href="https://www.digitalocean.com/" target="_blank" rel="noopener">digitalocean</a>和日本的<a href="https://www.vultr.com/" target="_blank" rel="noopener"> vultr</a>都不错，还有10-50美元的优惠。</p><p>现在ipv6的防火墙基本处于放任的状态，所以可以通过ipv6直接连接到香港和美国的谷歌服务器，但前提是DNS没有被污染，这里有一份<a href="https://zh.wikipedia.org/zh-cn/%E5%9F%9F%E5%90%8D%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%93%E5%AD%98%E6%B1%A1%E6%9F%93" target="_blank" rel="noopener">dns缓存污染列表</a>，如果不幸用wireshark发现里面存在这里面的ip地址，那就是污染了，那些ip是不存在的或者在出关的时候直接被过滤掉了。</p><p>所以你需要一个好的支持ipv6的DNS，配置到自己的网络上，有google的<a href="https://developers.google.com/speed/public-dns/docs/using" target="_blank" rel="noopener">公共DNS</a>，我们用的是北邮的dns，基本可以满足搜索和百科的要求。</p><p>另一个更直接的办法，是直接在hosts文件里面添加你需要访问的ip地址+（TAB）+对应的域名，如果你不知道hosts文件的作用，可以先看下<a href="https://zh.wikipedia.org/wiki/Hosts%E6%96%87%E4%BB%B6" target="_blank" rel="noopener">这篇文章</a>。hosts无奈不支持泛解析，所以改好后文件会比较大，通过<a href="https://serve.netsh.org/pub/ipv6-hosts/" target="_blank" rel="noopener">奶齿博客下载</a>最新的hosts，在替换或者修改hosts文件之前，请确保你对此文件拥有编辑权，可以通过右键属性-&gt;编辑权限完成。这样打开浏览器，键入<a href="https://google.com.hk" target="_blank" rel="noopener">https://google.com.hk</a>应该就可以访问了，不放心的还可以通过cmd-&gt;ipconfig/flushdns来刷新一下系统的dns。</p><p>对于学习技术的人来说，谷歌是必要的，当然有些东西通过百度才可以获得好的查询结果，所以结合起来挺好的。</p><p>另外Wikipedia的条理性很强，它把几乎所有相关的知识都链接到一个词条里面，这样有利于新知识的学习和知识的整理。</p><p>说道fq，不得不说<a href="http://shadowsocks.org" target="_blank" rel="noopener">shadowsocks</a>（下称ss），通过sock5代理的方式，可用性很强，至少在大部分vpn被屏蔽后仍然坚挺，官网上有具体的教程，而且github上还有用各种语言开发的版本，比较活跃。</p><p>ss基于c/s模式，通过全局代理/PAC智能代理，能够分流本地网站和外网，从而只对外网代理，既然基于c/s模式，那么肯定需要一台服务器架设在外面，如果你有兴趣，可以通过docker非常简单的安装一个，docker是一个容器，通过一个虚拟的环境方便可以实现应用在各个server上迁移，大大减轻了开发人员配置环境的工作，这里有一篇关于<a href="http://liujin.me/blog/2015/05/27/Docker-DigitalOcean-Shadowsocks-5-%E5%88%86%E9%92%9F%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/" target="_blank" rel="noopener">DO主机配置docker</a>的教程，两行代码就可以搭建成功，但我没找到如何实现docker支持ss的ipv6代理，所以只能通过ipv4的方式。</p><p>记得林工说过，我们的网络具有天然的学习网络知识的优势233，最近在看他的第二本书<a href="https://book.douban.com/subject/26710788/" target="_blank" rel="noopener">《wireshark网络分析艺术》</a>，挺有意思的，另外异步社区的专访<a href="http://www.epubit.com.cn/article/389" target="_blank" rel="noopener">在这里</a>，期待他的下一本园艺书。</p><p>以上。</p><p>&nbsp;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我们知道，校园网支持ipv6网络，平时我们都是在使用双栈进行网络通信，只是大多时候我们没有发现，也就没有充分利用罢了。（当然我也没有充分利用起来，最近开始学习网络编程，准备写一个ipv6或者双栈下的局域网聊天软件）&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://zh.wi
      
    
    </summary>
    
      <category term="网络分析" scheme="https://hackeryard.github.io/categories/%E7%BD%91%E7%BB%9C%E5%88%86%E6%9E%90/"/>
    
    
  </entry>
  
  <entry>
    <title>上大学，学习重要，还是实践重要？</title>
    <link href="https://hackeryard.github.io/2017/03/12/what-is-important-in-college/"/>
    <id>https://hackeryard.github.io/2017/03/12/what-is-important-in-college/</id>
    <published>2017-03-12T02:28:49.000Z</published>
    <updated>2018-01-19T01:31:34.253Z</updated>
    
    <content type="html"><![CDATA[<p>（本文转自黄老师）</p><p>在我当老师的这些年里，遇到过很多问这样问题的学生，或者说是纠结于这个问题的学生。大家都很困惑，大学里的课程好像都没什么意思，而且不是学长们都说了么，这些知识到工作的时候都用不着，那我现在还那么认真学它干什么？</p><p>今年我终于跟传说中的90后们打上了交道，一位上课不认真听讲，课后被我留堂做练习的孩子跟我说：“老师，我就不喜欢学习，我就喜欢搞活动，课程能过就行，60分万岁！”虽然当时我头顶有三条线的乌鸦飞过，但是我还是很平静地跟小P孩说：你有你的兴趣，但是我作为任课老师，我还是喜欢课程挂的人越少越好，我要保证你们掌握基本知识以顺利通过考试吧？</p><p>好了，那是番外篇，还是回到今天我要说的这个主题。</p><p>上大学，到底学习重要，还是实践重要？我认为取决于你的态度。态度积极，一切皆可为。</p><p>大学毕竟还是学校，以学为主是肯定的，可是这个“学”不局限于课堂学习，你在大学里经历的一切都可以称作你的修学过程。</p><p>大学现在普遍的修“学”之道有两大类：</p><p>一种就是学霸，这种是最正统的归宿，也是最不容易犯错的修炼过程；因为你到毕业时，即使你没有任何实践经验，但是足够好的成绩已经可以让你保送研究生、出国继续深造了。而且，也有不少公司的HR认为一个人如果学习很好，至少他的学习能力和态度也不会差到哪里去。因此，我曾经劝过一些总把“迷茫”挂在嘴边的孩子，我说：“如果你觉得大学生活让你无所适从，找不到方向位置的话，那么就学习去！你不要纠结什么青春理想，什么热血拼搏了，你就把你用来抱怨迷茫的时间好好地学习掌握一技之长！！一口流利的外语？一个精通的软件？一个熟练的技能？哪怕是一个强健的体魄呢，这些让你花四年的时间绝对能学得足够好足够牛逼了，而最终你也不会因为蹉跎了四年而一事无成，何况当你成为某个领域的小专家时，很多机会其实已经在敲你的窗户了。”</p><p>另外一种就是实践达人们，凡是社团风云人物、学生会、团委的leader、创业先锋、比赛牛人都属于这一类，这些人他们学习成绩一般，但是实践经验丰富，到了毕业冲到社会大流中的时候都能很快适应节奏，因为他们在实践过程中早就练就了一个抗击打的心脏、团队合作及与人沟通交流的能力。不是有个老段子么，成绩100分的成为什么人，成绩不及格的成为什么人。像我这种均分80的果然就变成了老师的同事，而那些成绩吊儿郎当的孩子也早已成为这个总，那个总了。当然就是因为他们更多的时间花费在了更快接近社会的技能学习上。但是我得劝劝那些说“我不喜欢学习，只喜欢实践”的孩子，这本没有错，每个人都有自己的兴趣，何况偶尔我自己也会吐槽下大学的教育，体制僵化，扼杀思想。。。。但如果你确实对建设一个社团，对参加一些比赛，对创业打工抱有极大的热忱的话，你在这里学到的东西对于谋生也许比课堂知识更加有用。可问题是，每年我也能见到很多以此为借口，逃避课堂，考试一路红灯的学生，这时候我希望你能反省自己，你是真的为了你的那些“活动”不得已放弃了很多学习机会，还是你其实只是以此为借口骗自己说，我虽然没学习，但是我在搞活动我没玩儿啊！。。。你确定你不是在宿舍瞎混，或者在社团里瞎混着呢？</p><p>所以，无论你打算如何度过你的大学，学习也好，实践也好。这真的是看态度的。态度积极正面，一切皆可为。两种发展模式都有它的利弊在里面，要是你善于用它的“利”，回避它的“弊”，无论你选择学习为主，还是实践为主，你都能收获很多，成长也很快。而可惜的是，在如今的大学里，绝大多数都是到了大四找工作的时候，简历上除了姓名、电话、专业，就没什么可写的学生。这样真的就是蹉跎岁月，浪费青春了！在人生18-22岁这么黄金的时段里，你的简历居然没有什么可以记录的！我记得我在给很多学生做讲座的时候，我就说过，请大一的时候就给自己打印一张空白的简历，时不时查看一下，在这个学期结束的时候，我有什么东西可以记录上去的？检验你的大学时光是否又虚度了一个春秋？有孩子会说：嘿！我有很棒的哥们，我有一场轰轰烈烈的恋爱，我有好多宝贵的回忆！。。。切~，我们都是从青春走过来的，哪一个人的青春没有让自己留恋或者纪念的事情？无论好坏。但是父母毕竟是花血汗钱送你来上大学的，你得用能写在简历上的东西来向他们证明他们的钱没白花！要谈恋爱，村里的小芳也可以谈啊！干嘛花那么多车票钱送到这里谈一个将来可能还带不回村的女朋友？！</p><p>so，别扯了，乖乖打印张空的简历，每个学期末检视下自己的“奋斗”吧！</p><p>有一句话送给所有看这篇文章的人，大学四年，不可一业不专，也不可只专一业。前者是劝大家还是要好好了解下本专业领域的大多数基础知识，不要成为那种“从电子商务专业毕业了，还以为这个专业只能去开个淘宝店”的专业毕业生；而后者是劝大家多多接触其他领域其他知识，这多专业融合的人才是横向发展最好的，比如那些技术宅男们，真心要多接触一些人文知识，这样将来你们设计出来的东西也会更加人性化。<br>学习与实践，你选择好了么？</p><p>在老校区无聊等着上课的我，坐在车里敲的这篇文章，希望对你们有用。</p><p>当然，林子大了，奇葩总是有的。不要拿小概率事件来跟我辩驳哦，有这时间好好挥洒青春的汗水吧！</p><p>知易行难，与君共勉。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;（本文转自黄老师）&lt;/p&gt;
&lt;p&gt;在我当老师的这些年里，遇到过很多问这样问题的学生，或者说是纠结于这个问题的学生。大家都很困惑，大学里的课程好像都没什么意思，而且不是学长们都说了么，这些知识到工作的时候都用不着，那我现在还那么认真学它干什么？&lt;/p&gt;
&lt;p&gt;今年我终于跟传说
      
    
    </summary>
    
      <category term="大学生活" scheme="https://hackeryard.github.io/categories/%E5%A4%A7%E5%AD%A6%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="大学实践" scheme="https://hackeryard.github.io/tags/%E5%A4%A7%E5%AD%A6%E5%AE%9E%E8%B7%B5/"/>
    
  </entry>
  
  <entry>
    <title>你凭什么要过你想要的生活？</title>
    <link href="https://hackeryard.github.io/2017/03/12/why-do-you-want-to-lead-your-life/"/>
    <id>https://hackeryard.github.io/2017/03/12/why-do-you-want-to-lead-your-life/</id>
    <published>2017-03-12T02:19:08.000Z</published>
    <updated>2018-01-19T01:31:09.374Z</updated>
    
    <content type="html"><![CDATA[<p>（本文转自黄老师，此乃吐槽帖，误伤请见谅）</p><blockquote><p>如果你的大学志愿是父母帮你选的，如果大学你只挑容易过的课程学习，如果你到毕业也是听从家长的安排，如果你从来就没自己做过决定，你凭什么要过你想要的生活？<br>最近，得知一位学生成功保送至浙大，因为了解其个中纠结，突然很想写这个题目。到底有多少人为自己奋争过？为自己想要走的路，想要过的生活争取过？我也在课堂上跟我的学生们分享过这个故事，这个新鲜出炉，还冒着热气儿，主人公甚至还未从外地回校的故事。都说，一千个人眼中，就有一千个莎士比亚，同样，每个人解读这个故事，都有自己的角度，那么，我就想说这句：“如果你从没为自己争取过，你凭什么过你想要的生活？”</p></blockquote><p>这个学生是西电某学院的全院第一名，逢大四保研之际，得知由于其学院的B专业在本校没有硕士点，故其学院每年的惯例就是把保外名额给B专业的学生。虽然他是全院排名第一，但是由于他身处A专业，即使他已经跟浙大的导师联系甚欢，Offer妥妥拿，却仍然没有这个保外资格。他非常沮丧。。（我见过同样这样遭遇、这么沮丧的孩子，得知这个消息后，也只是在网上发了个帖子胡乱发泄了一通了事。）</p><p>他很沮丧，很不甘。。。因为大二时选修过我的课，于是他做了“奋争”的第一件事：给我发邮件打电话，询问这种情况，各个院的处理方式。（你是否从不敢因自己的困惑向有关的老师咨询过？别怕老师不回复或拒绝，传道授业解惑，本来就是老师该做的事。）我建议他找院长和主管学生工做的书记恳请要求一个名额（学院有分配名额的权利吧，至少），于是他走了第二步：找院长和书记。（有多少人从来不敢去领导那里争取本该属于自己的权益？包括我。）当然，未果。个中又有一周的许多曲折、泄气、放弃和挣扎，略过不表。此后，我在外校了解到，通常教务处有机动名额，于是我建议他走了第三步：找教务处处长，申请为他保留一个保外名额。。。最终成功。我想说的是，有多少人会倒在这一、二、三步中？换做当年的我，我没有找任何老师和领导的勇气，向来都是自己的事自己能处理就处理，处理不了就忍。他换作我，估计会继续在西电呆三年，呆“呆”三年。。。所以，如果你从未为自己抗争，争取，奋斗，你凭什么要过你想要的生活？知不知道很多人生轨迹在本可以逆转的时候，你放弃了？</p><p>近来，可能自己处于工作六七年的“职业倦怠期”，跟同事闲聊，大家都纷纷吐槽自己在教学上很多的困惑。</p><p>你看吧，大学生们都在叫喊着不要“填鸭式教育”，要”启发式“，要开发，要动脑，可是当你真的把课堂交给他们，希望他们做项目任务，主导某一堂课的时候，学生们纷纷表示麻烦，“老师，还是你讲吧？” ，要不就是胡乱拼凑一份PPT，永远只有那一两个学霸在做任务，多数都在打酱油。（当然有认真的学生，我指的是“值得”吐槽的那些）</p><p>你看看，基础课也好，必修课也罢，目光呆滞的孩子遍布课堂（有多少次都让我深深觉得自己的冷笑话数据库储备不够了）。认真学的未必是真的爱学，学霸心理使然；不认真的，更不必说。你说，是中国教育顺序颠倒的原因么？本该轻松的高中，把孩子们坑害得够苦，于是，到了本该努力决定人生方向的大学却纷纷丢盔卸甲，从此“学习”是路人？来大学彻底“天高地阔任我游”了？</p><p>你再看，先不说学校各种坑爹的选修课安排，但是选修课的本意不就是让自己在主修专业课之余，可以挑一些感兴趣的课程额外辅修么？那有多少人只是冲着好拿学分，好过的课去的呢？奔着可以选修自己感兴趣课程的，学一点专业之外知识的孩子的比例有多少呢？“必修课选逃，选修课必逃”的潜规则，我也懂。。。。</p><p>好了，咱不说学习吧，你说说实践。让我帮忙改简历的学生多了，经历了08级到10级，有多少孩子到了毕业拿过来的一页纸上填不满半页的？社会实践木有，工作实习木有，校园活动总该有了吧？一看经历描述，没干啥，挂名个干事，写的就不是自己做过的事。有孩子吐槽说学生工作官僚化、社团活动没新意，那没看到周围那些忙得鬼影都不见的实践达人们么？他们为什么忙得不亦乐乎？没有奖学金加分，没有一个好成绩做依靠，大学四年，最后简历上，除了姓名、专业和联系方式，没啥可写的啦？！大牛？当然有，大牛的简历才好写呢，不用我改。我担心的，就是这些没什么可写的孩子，你们的求职之路将来得有多艰辛哪！这四年都干啥去了呢？都不为将来的自己该走什么路，该怎么走，用四年的时间好好规划规划？这时间多充裕啊，是不？咋一晃眼毕业了，啥也没干捏？？（为嘛这么严肃的话题，写到后来，东北味儿都冒出来了？╮(╯Д╰)╭）</p><p>深以为惑。我才创建了“学生汇”给爱做运营和市场的孩子去实践，创建了“乐为”给那些有理想有梦想的孩子提供资金和志愿者，去做他们想做的事啊！</p><p>你说说，每年一大波一大波新生来袭后 ，姐姐我站在我这”铁打的营盘“上看了一年又一年，孩子们就跟轮回似的，只是换了副皮囊换了个名字，这些甲乙丙丁ABCD他们入学不久之后就会再次经历跟他们的上一届，再上一届，再上上一届。。。。的学长学姐们同样的一圈困惑：大学社团要不要参加？大学这些课程学了有什么用？当学霸，还是不当？。大学干什么好？哇靠，怎么这么快就毕业了？。。。。年复一年，日复一日。。。。此处存二问。第一，中国的教育为什么这十几年对这个现象没有丝毫的改善？第二，大学生盆友们，为什么自己不给自己找到这些答案 ，会任由自己彷徨到大四？为什么？</p><p>没有人会比你自己更关心自己的生活。</p><p>如果从来随波逐流，不为自己做主，你将来凭什么过上你想要的生活？</p><p>时不我待，青春易蹉跎，转眼韶华逝。</p><p>与君共勉。</p><p>&nbsp;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;（本文转自黄老师，此乃吐槽帖，误伤请见谅）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果你的大学志愿是父母帮你选的，如果大学你只挑容易过的课程学习，如果你到毕业也是听从家长的安排，如果你从来就没自己做过决定，你凭什么要过你想要的生活？&lt;br&gt;最近，得知一位学生成功保送至浙大
      
    
    </summary>
    
      <category term="大学生活" scheme="https://hackeryard.github.io/categories/%E5%A4%A7%E5%AD%A6%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="大学的过法" scheme="https://hackeryard.github.io/tags/%E5%A4%A7%E5%AD%A6%E7%9A%84%E8%BF%87%E6%B3%95/"/>
    
      <category term="实践" scheme="https://hackeryard.github.io/tags/%E5%AE%9E%E8%B7%B5/"/>
    
  </entry>
  
  <entry>
    <title>寻找有用的模式</title>
    <link href="https://hackeryard.github.io/2017/03/12/searching-the-beautiful-patterns/"/>
    <id>https://hackeryard.github.io/2017/03/12/searching-the-beautiful-patterns/</id>
    <published>2017-03-11T16:02:37.000Z</published>
    <updated>2018-03-17T02:36:49.259Z</updated>
    
    <content type="html"><![CDATA[<p>之所以想到要写这篇文章，是因为我觉得，在我们的一生中，在我们追逐成功的路上，都需要不懈的寻找那些有用的模式，能够适应快速变化社会的模式，能够让自己的生活和内心都富有的模式。</p><p>这些模式，我们可能在他人的分享中（比如TED）获取，也可能还是需要自己实践一下改进一下以最适合自己，所谓纸上得来终觉浅，就是提醒我们做个勇敢的人，面对纷乱的情形，如何抽丝剥茧，慧眼识珠，发现有用的模式，然后应用起来，在这个体系里面游刃有余。最众所周知的例子，高中的物理，基础的力学电学知识，是不是可以指导我们制作精密的机器或完成覆盖整个世界的电网？这些抽象的学问，让我们能够理解物理世界的基本运行规律，而正是掌握了它们，我们才能武装自己，进而走的更远。</p><p>就我看来，有两种基本的寻找有用模式的有效方式，一种是依靠他人的“透漏”，另一种是靠自己观察。当今互联网时代，快节奏的生活似乎让人们疲于观察体会（或许善于并坚持观察和思考的人一直不多？），人们更乐于寻找别人“透漏”的模式，然后自己实践，但更多的是，把这些模式奉为圣经，之后不管不问，只是知道这么回事罢了。这种当然是最快的方式，却多半不能长久，毕竟如果不是自己思考的结果，就算觉得有道理也不一定会去照着做，就像我们常听到各种励志讲座，当时热血沸腾，事后就跟没发生一样。最重要的，这种道理可能不是真正适合自己的，别人使用别人的方法论时，适配的是别人的环境和背景，别人的心智模型，这也往往是人与人之间差距很大的地方。</p><p>另一类是自己观察。有用的模式是能够解决某些问题的，正是因为世界上有太多的未知和秘密存在，探索的大门才永久开放，等待着探险者的深入。这些探险者往往智勇双全，就像福尔摩斯，他可以通过细微的痕迹判断谁是说谎者，可以按照自己的判断勇敢找寻线索。他在观察和推理上都有自己一套独有的特别有效的模式，他靠积累案件并在案件中不断加深自己对犯罪和推理的认识，靠保有对这个世界上常人无法解决的问题的好奇和探索，最终成就了自己。</p><p>下文再更。</p><p>&nbsp;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之所以想到要写这篇文章，是因为我觉得，在我们的一生中，在我们追逐成功的路上，都需要不懈的寻找那些有用的模式，能够适应快速变化社会的模式，能够让自己的生活和内心都富有的模式。&lt;/p&gt;
&lt;p&gt;这些模式，我们可能在他人的分享中（比如TED）获取，也可能还是需要自己实践一下改进一下
      
    
    </summary>
    
      <category term="随想集" scheme="https://hackeryard.github.io/categories/%E9%9A%8F%E6%83%B3%E9%9B%86/"/>
    
    
      <category term="探索" scheme="https://hackeryard.github.io/tags/%E6%8E%A2%E7%B4%A2/"/>
    
      <category term="模式" scheme="https://hackeryard.github.io/tags/%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>解决联想Win8无线网受限的问题</title>
    <link href="https://hackeryard.github.io/2017/01/16/solve-win8-limited-wireless-network/"/>
    <id>https://hackeryard.github.io/2017/01/16/solve-win8-limited-wireless-network/</id>
    <published>2017-01-16T03:08:07.000Z</published>
    <updated>2018-01-19T01:31:19.112Z</updated>
    
    <content type="html"><![CDATA[<p>昨天连接无线网，发现竟然一直受限，而受限就意味着连不上网，所以百度了一下，好多答案都不是我需要的，最后找到<a href="http://jingyan.baidu.com/article/fd8044faf3d7a05030137a5d.html" target="_blank" rel="noopener">一篇经验</a>，因为我们以前的对于无线网卡的配置竟然会用在当前的无线网上，比如在学校使用的六快播vpn，就改变了我的配置，导致我一直以为是驱动的问题。</p><p>首先，打开受限的无线网络，查看状态，看网关是否正确，应该是192.168.0/1.1，看ip地址是否正确，如果你是192.168.0/1.xxx，那恭喜你，这个配置没有问题，可以去检查驱动或者<a href="http://win8.yesky.com/227/35885727.shtml" target="_blank" rel="noopener">配置FIPS兼容性</a>了。</p><p>如果有问题，修改网关和ip地址到合适的值，或者直接配合DHCP，让路由器直接分配ip地址也行。</p><p>另外，电脑或手机出于对电源的管理，会有一些针对无线连接的高性能和节能的配置，可以通过类似“电源管理”或“WLAN高级”查看并修改。</p><p>（本文完）</p><p>&nbsp;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;昨天连接无线网，发现竟然一直受限，而受限就意味着连不上网，所以百度了一下，好多答案都不是我需要的，最后找到&lt;a href=&quot;http://jingyan.baidu.com/article/fd8044faf3d7a05030137a5d.html&quot; target=&quot;_bl
      
    
    </summary>
    
      <category term="Windows应用" scheme="https://hackeryard.github.io/categories/Windows%E5%BA%94%E7%94%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>一碗清汤荞麦面</title>
    <link href="https://hackeryard.github.io/2017/01/16/a-bowl-of-soup-noodles/"/>
    <id>https://hackeryard.github.io/2017/01/16/a-bowl-of-soup-noodles/</id>
    <published>2017-01-16T02:00:30.000Z</published>
    <updated>2018-01-19T01:30:55.114Z</updated>
    
    <content type="html"><![CDATA[<p>两天前意外看到一篇总结《读者》二十年来最具有影响力的文章， 看了之后深有感触，总结其中几篇，如下：</p><blockquote><p>小小的善意意味着什么？<br>这篇文章给我们上了一课，我记得以前带着哀悯眼神的胡哲也给我上过课，那就是，它们很可能让身处深渊的看不到生活希望的人，重拾面对困难的信心。世界的确存在很多恶，但每个人也要不忘记自己的良心，不然世界就太残酷了。</p></blockquote><p>全文的高潮应该在他们境况好一些了，两个儿子都长大了懂事了，而母亲也获得了公司的一份特别津贴（我觉得也有同情的一些成分），还清了所有的欠款，他们点了两份清汤面，在小儿子朗读他的作文时，后面的女掌柜和她的丈夫，拔河比赛似的扯着毛巾擦眼泪…</p><p>最后（十四年后），当掌柜习惯性的保留那个座位，但是已经快忘了那一个悲惨的家庭的时候，真正振作起来的母子三人来到了北海亭面馆，并向善良的掌柜夫妇道谢，“那时，承蒙贵店一碗清汤面的激励，母子三人携手努力生活过来了”，然后可以想象一直静听说话的女掌柜，一边掩盖着刷刷的眼泪，一边失声吆喝同样情形的丈夫做三碗面的情形…</p><p>被善意感动的他们，也向世界洒下了善的种子。这几天，每次看这篇文章都会忍不住掉眼泪，以前很小的时候也看过一次，但是怎么都没有这么大的触动，以至于我如今再看这篇文章，脑袋里还留着那种“套路”的不好影响，但不要紧，有的套路并不一定是坏的，套路只是工具，没有情感支撑的套路才是可怕的。</p><p>&nbsp;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;两天前意外看到一篇总结《读者》二十年来最具有影响力的文章， 看了之后深有感触，总结其中几篇，如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;小小的善意意味着什么？&lt;br&gt;这篇文章给我们上了一课，我记得以前带着哀悯眼神的胡哲也给我上过课，那就是，它们很可能让身处深渊的看不到生
      
    
    </summary>
    
      <category term="《读者》笔记" scheme="https://hackeryard.github.io/categories/%E3%80%8A%E8%AF%BB%E8%80%85%E3%80%8B%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
</feed>
